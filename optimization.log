************* Module client.frontend.log-analysis-integration
client/frontend/log-analysis-integration.py:150:26: E0001: Parsing failed: 'unterminated f-string literal (detected at line 150) (client.frontend.log-analysis-integration, line 150)' (syntax-error)
************* Module client.frontend.log-analysis
client/frontend/log-analysis.py:50:16: E0001: Parsing failed: 'unterminated string literal (detected at line 50) (client.frontend.log-analysis, line 50)' (syntax-error)
************* Module client.file-sync-client
client/file-sync-client.py:485:21: E0001: Parsing failed: 'unterminated string literal (detected at line 485) (client.file-sync-client, line 485)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.2
patch/ailinux-alpha-code-patcher-v0.2.py:38:20: E0001: Parsing failed: 'unexpected indent (patch.ailinux-alpha-code-patcher-v0.2, line 38)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.5
patch/ailinux-alpha-code-patcher-v0.5.py:142:29: E0001: Parsing failed: 'unterminated f-string literal (detected at line 142) (patch.ailinux-alpha-code-patcher-v0.5, line 142)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.1
patch/ailinux-alpha-code-patcher-v0.1.py:213:14: E0001: Parsing failed: 'expected ':' (patch.ailinux-alpha-code-patcher-v0.1, line 213)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.7
patch/ailinux-alpha-code-patcher-v0.7.py:229:25: E0001: Parsing failed: 'unterminated f-string literal (detected at line 229) (patch.ailinux-alpha-code-patcher-v0.7, line 229)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.6
patch/ailinux-alpha-code-patcher-v0.6.py:357:36: E0001: Parsing failed: 'unterminated string literal (detected at line 357) (patch.ailinux-alpha-code-patcher-v0.6, line 357)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.4
patch/ailinux-alpha-code-patcher-v0.4.py:122:29: E0001: Parsing failed: 'unterminated f-string literal (detected at line 122) (patch.ailinux-alpha-code-patcher-v0.4, line 122)' (syntax-error)
************* Module patch.ailinux-alpha-code-patcher-v0.8
patch/ailinux-alpha-code-patcher-v0.8.py:215:52: E0001: Parsing failed: 'unterminated string literal (detected at line 215) (patch.ailinux-alpha-code-patcher-v0.8, line 215)' (syntax-error)
************* Module devtools.fix_duplicate_code
devtools/fix_duplicate_code.py:205:27: E0001: Parsing failed: 'unterminated string literal (detected at line 205) (devtools.fix_duplicate_code, line 205)' (syntax-error)
************* Module devtools.cleanup
devtools/cleanup.py:27:4: E0001: Parsing failed: 'unexpected indent (devtools.cleanup, line 27)' (syntax-error)
************* Module server.backend.data_server
server/backend/data_server.py:254:24: E0001: Parsing failed: 'unexpected indent (server.backend.data_server, line 254)' (syntax-error)
************* Module cleanup
cleanup.py:27:4: E0001: Parsing failed: 'unexpected indent (cleanup, line 27)' (syntax-error)
************* Module uploadready
uploadready.py:11:18: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:12:19: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:13:35: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:39:27: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:70:73: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:71:38: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:72:47: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:80:45: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:81:32: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:102:58: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:103:32: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:109:46: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:110:32: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:140:0: C0301: Line too long (111/100) (line-too-long)
uploadready.py:155:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:158:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:177:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:184:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:191:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:204:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:233:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:246:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:251:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:255:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:263:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:274:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:281:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:298:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:306:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:310:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:316:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:319:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:326:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:341:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:344:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:351:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:361:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:365:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:374:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:377:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:381:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:384:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:392:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:399:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:404:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:406:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:426:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:431:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:436:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:439:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:452:0: C0301: Line too long (113/100) (line-too-long)
uploadready.py:453:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:458:61: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:462:0: C0301: Line too long (108/100) (line-too-long)
uploadready.py:464:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:467:0: C0301: Line too long (105/100) (line-too-long)
uploadready.py:468:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:488:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:494:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:500:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:506:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:507:78: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:513:0: C0301: Line too long (108/100) (line-too-long)
uploadready.py:525:0: C0303: Trailing whitespace (trailing-whitespace)
uploadready.py:1:0: C0114: Missing module docstring (missing-module-docstring)
uploadready.py:134:11: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:79:24: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
uploadready.py:101:22: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
uploadready.py:108:22: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
uploadready.py:118:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
uploadready.py:10:0: R0911: Too many return statements (9/6) (too-many-return-statements)
uploadready.py:56:12: W0612: Unused variable 'github_url' (unused-variable)
uploadready.py:208:11: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:189:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:190:21: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
uploadready.py:193:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
uploadready.py:197:18: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
uploadready.py:199:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:213:0: R0914: Too many local variables (21/15) (too-many-locals)
uploadready.py:407:11: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:295:19: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:289:31: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:300:8: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
uploadready.py:312:14: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
uploadready.py:324:12: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
uploadready.py:328:8: C0415: Import outside toplevel (json) (import-outside-toplevel)
uploadready.py:329:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:349:12: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
uploadready.py:353:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:372:16: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
uploadready.py:375:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:394:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:409:8: C0415: Import outside toplevel (traceback) (import-outside-toplevel)
uploadready.py:213:0: R0915: Too many statements (95/50) (too-many-statements)
uploadready.py:440:11: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:434:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:434:44: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
uploadready.py:536:11: W0718: Catching too general exception Exception (broad-exception-caught)
uploadready.py:7:0: W0611: Unused Dict imported from typing (unused-import)
uploadready.py:7:0: W0611: Unused Any imported from typing (unused-import)
************* Module client.python-fix
client/python-fix.py:25:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:30:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:38:0: C0301: Line too long (116/100) (line-too-long)
client/python-fix.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:57:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:59:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:70:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:87:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:118:70: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:132:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:135:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:138:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:142:0: C0303: Trailing whitespace (trailing-whitespace)
client/python-fix.py:1:0: C0103: Module name "python-fix" doesn't conform to snake_case naming style (invalid-name)
client/python-fix.py:24:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:33:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:38:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:46:8: C0415: Import outside toplevel (uuid) (import-outside-toplevel)
client/python-fix.py:58:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:67:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/python-fix.py:64:12: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
client/python-fix.py:66:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:68:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:75:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/python-fix.py:73:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
client/python-fix.py:76:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:93:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/python-fix.py:89:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
client/python-fix.py:91:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:91:24: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
client/python-fix.py:94:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:103:8: C0415: Import outside toplevel (flask) (import-outside-toplevel)
client/python-fix.py:104:8: C0415: Import outside toplevel (werkzeug) (import-outside-toplevel)
client/python-fix.py:105:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:106:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:109:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:112:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:126:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/python-fix.py:144:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
client/python-fix.py:12:0: W0611: Unused import importlib (unused-import)
************* Module client.websocket-client
client/websocket-client.py:159:0: C0303: Trailing whitespace (trailing-whitespace)
client/websocket-client.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
client/websocket-client.py:175:0: C0301: Line too long (123/100) (line-too-long)
client/websocket-client.py:211:0: C0301: Line too long (106/100) (line-too-long)
client/websocket-client.py:333:0: C0301: Line too long (110/100) (line-too-long)
client/websocket-client.py:1:0: C0103: Module name "websocket-client" doesn't conform to snake_case naming style (invalid-name)
client/websocket-client.py:6:0: E0401: Unable to import 'websocket' (import-error)
client/websocket-client.py:43:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
client/websocket-client.py:79:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:88:23: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:89:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:95:23: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:96:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:120:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:135:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:133:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:136:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:149:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:157:23: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:168:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:219:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:175:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:211:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:216:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:220:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:303:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:278:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:288:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:295:23: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:296:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:299:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:302:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:304:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:264:26: W0613: Unused argument 'ws' (unused-argument)
client/websocket-client.py:315:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:317:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:307:24: W0613: Unused argument 'ws' (unused-argument)
client/websocket-client.py:333:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:322:24: W0613: Unused argument 'ws' (unused-argument)
client/websocket-client.py:337:23: W0613: Unused argument 'ws' (unused-argument)
client/websocket-client.py:337:27: W0613: Unused argument 'message' (unused-argument)
client/websocket-client.py:347:23: W0613: Unused argument 'ws' (unused-argument)
client/websocket-client.py:347:27: W0613: Unused argument 'message' (unused-argument)
client/websocket-client.py:369:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/websocket-client.py:370:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/websocket-client.py:374:0: C0103: Constant name "_instance" doesn't conform to UPPER_CASE naming style (invalid-name)
client/websocket-client.py:382:4: W0603: Using the global statement (global-statement)
client/websocket-client.py:7:0: C0411: standard import "threading" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:8:0: C0411: standard import "logging" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:9:0: C0411: standard import "json" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:10:0: C0411: standard import "time" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:11:0: C0411: standard import "os" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:12:0: C0411: standard import "uuid" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:13:0: C0411: standard import "traceback" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:14:0: C0411: standard import "typing.Dict" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:15:0: C0411: standard import "ssl" should be placed before third party import "websocket" (wrong-import-order)
client/websocket-client.py:14:0: W0611: Unused List imported from typing (unused-import)
client/websocket-client.py:14:0: W0611: Unused Union imported from typing (unused-import)
************* Module client.alphaos
client/alphaos.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:56:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:60:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:104:0: C0301: Line too long (131/100) (line-too-long)
client/alphaos.py:122:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
client/alphaos.py:12:0: E0401: Unable to import 'autobahn.asyncio.websocket' (import-error)
client/alphaos.py:26:4: C0103: Method name "onConnect" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:28:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:30:4: C0103: Method name "onOpen" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:36:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:37:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:39:4: C0103: Method name "onMessage" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:39:33: C0103: Argument name "isBinary" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:54:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:44:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:55:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:57:4: C0103: Method name "handleTypedMessage" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:66:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:67:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:71:4: C0103: Method name "onClose" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:71:22: C0103: Argument name "wasClean" doesn't conform to snake_case naming style (invalid-name)
client/alphaos.py:73:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:71:22: W0613: Unused argument 'wasClean' (unused-argument)
client/alphaos.py:71:32: W0613: Unused argument 'code' (unused-argument)
client/alphaos.py:106:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:109:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:112:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:105:12: W0612: Unused variable 'transport' (unused-variable)
client/alphaos.py:128:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:121:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:129:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:136:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:137:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/alphaos.py:144:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/alphaos.py:145:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module client.backend.backend-imports-fix
client/backend/backend-imports-fix.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:46:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:56:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/backend-imports-fix.py:1:0: C0103: Module name "backend-imports-fix" doesn't conform to snake_case naming style (invalid-name)
client/backend/backend-imports-fix.py:55:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/backend-imports-fix.py:68:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/backend-imports-fix.py:99:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/backend-imports-fix.py:110:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
************* Module client.backend.app
client/backend/app.py:23:0: C0301: Line too long (102/100) (line-too-long)
client/backend/app.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:112:0: C0301: Line too long (120/100) (line-too-long)
client/backend/app.py:119:0: C0301: Line too long (132/100) (line-too-long)
client/backend/app.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:234:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:297:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:301:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:305:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:331:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:346:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:349:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:354:0: C0301: Line too long (106/100) (line-too-long)
client/backend/app.py:355:0: C0301: Line too long (120/100) (line-too-long)
client/backend/app.py:356:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:359:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:366:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:375:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:378:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:381:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:385:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py:15:0: E0401: Unable to import 'flask' (import-error)
client/backend/app.py:16:0: E0401: Unable to import 'flask_cors' (import-error)
client/backend/app.py:39:11: W1508: os.getenv default type is builtins.int. Expected str or None. (invalid-envvar-default)
client/backend/app.py:67:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:76:27: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:75:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:77:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:83:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:135:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:111:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:126:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:139:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:173:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:174:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:186:8: W0621: Redefining name 'models' from outer scope (line 423) (redefined-outer-name)
client/backend/app.py:188:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:189:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:210:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:211:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:241:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:239:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:242:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:268:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:247:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
client/backend/app.py:269:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:309:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:298:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
client/backend/app.py:310:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:386:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:387:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:419:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:420:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:425:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:436:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/app.py:437:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/app.py:13:0: W0611: Unused Dict imported from typing (unused-import)
client/backend/app.py:13:0: W0611: Unused Any imported from typing (unused-import)
client/backend/app.py:13:0: W0611: Unused Optional imported from typing (unused-import)
client/backend/app.py:13:0: W0611: Unused List imported from typing (unused-import)
client/backend/app.py:13:0: W0611: Unused Union imported from typing (unused-import)
client/backend/app.py:15:0: W0611: Unused send_from_directory imported from flask (unused-import)
************* Module client.backend.huggingface
client/backend/huggingface.py:27:0: C0301: Line too long (102/100) (line-too-long)
client/backend/huggingface.py:267:0: C0301: Line too long (114/100) (line-too-long)
client/backend/huggingface.py:393:0: C0301: Line too long (104/100) (line-too-long)
client/backend/huggingface.py:14:0: E0401: Unable to import 'dotenv' (import-error)
client/backend/huggingface.py:34:0: C0103: Constant name "_model_info_cache" doesn't conform to UPPER_CASE naming style (invalid-name)
client/backend/huggingface.py:37:0: C0103: Constant name "_cache_last_updated" doesn't conform to UPPER_CASE naming style (invalid-name)
client/backend/huggingface.py:52:4: W0603: Using the global statement (global-statement)
client/backend/huggingface.py:78:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:65:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:79:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:91:8: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/huggingface.py:96:8: C0415: Import outside toplevel (transformers) (import-outside-toplevel)
client/backend/huggingface.py:101:8: C0415: Import outside toplevel (huggingface_hub) (import-outside-toplevel)
client/backend/huggingface.py:106:8: C0415: Import outside toplevel (accelerate) (import-outside-toplevel)
client/backend/huggingface.py:111:8: C0415: Import outside toplevel (bitsandbytes) (import-outside-toplevel)
client/backend/huggingface.py:116:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:117:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
client/backend/huggingface.py:127:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:121:12: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/huggingface.py:121:12: E0401: Unable to import 'torch' (import-error)
client/backend/huggingface.py:124:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:128:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:96:8: W0611: Unused import transformers (unused-import)
client/backend/huggingface.py:101:8: W0611: Unused import huggingface_hub (unused-import)
client/backend/huggingface.py:106:8: W0611: Unused import accelerate (unused-import)
client/backend/huggingface.py:111:8: W0611: Unused import bitsandbytes (unused-import)
client/backend/huggingface.py:138:8: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/huggingface.py:139:8: C0415: Import outside toplevel (transformers) (import-outside-toplevel)
client/backend/huggingface.py:138:8: W0611: Unused import torch (unused-import)
client/backend/huggingface.py:139:8: W0611: Unused import transformers (unused-import)
client/backend/huggingface.py:155:4: W0603: Using the global statement (global-statement)
client/backend/huggingface.py:194:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:166:8: E0401: Unable to import 'huggingface_hub' (import-error)
client/backend/huggingface.py:166:8: C0415: Import outside toplevel (huggingface_hub.HfApi) (import-outside-toplevel)
client/backend/huggingface.py:195:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:242:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:215:8: E0401: Unable to import 'huggingface_hub' (import-error)
client/backend/huggingface.py:215:8: C0415: Import outside toplevel (huggingface_hub.HfApi) (import-outside-toplevel)
client/backend/huggingface.py:243:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:272:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:273:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:330:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:302:8: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/huggingface.py:302:8: E0401: Unable to import 'torch' (import-error)
client/backend/huggingface.py:303:8: E0401: Unable to import 'transformers' (import-error)
client/backend/huggingface.py:303:8: C0415: Import outside toplevel (transformers.pipeline, transformers.AutoTokenizer, transformers.AutoModelForCausalLM) (import-outside-toplevel)
client/backend/huggingface.py:311:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:327:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:331:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:303:8: W0611: Unused AutoTokenizer imported from transformers (unused-import)
client/backend/huggingface.py:303:8: W0611: Unused AutoModelForCausalLM imported from transformers (unused-import)
client/backend/huggingface.py:366:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:352:8: E0401: Unable to import 'transformers' (import-error)
client/backend/huggingface.py:352:8: C0415: Import outside toplevel (transformers.AutoTokenizer) (import-outside-toplevel)
client/backend/huggingface.py:355:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:367:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:430:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:410:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:424:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:431:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:437:4: W0602: Using global for '_model_info_cache' but no assignment is done (global-variable-not-assigned)
client/backend/huggingface.py:457:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/huggingface.py:456:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:458:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/huggingface.py:10:0: W0611: Unused Union imported from typing (unused-import)
client/backend/huggingface.py:10:0: W0611: Unused Tuple imported from typing (unused-import)
************* Module client.backend.app.py-header-fix
client/backend/app.py-header-fix.py:31:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py-header-fix.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py-header-fix.py:53:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py-header-fix.py:78:0: C0301: Line too long (102/100) (line-too-long)
client/backend/app.py-header-fix.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py-header-fix.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/app.py-header-fix.py:1:0: C0103: Module name "py-header-fix" doesn't conform to snake_case naming style (invalid-name)
client/backend/app.py-header-fix.py:58:0: C0413: Import "import logging" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:59:0: C0413: Import "import json" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:60:0: C0413: Import "import time" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:61:0: C0413: Import "import traceback" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:62:0: C0413: Import "from datetime import datetime" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:63:0: C0413: Import "from typing import Dict, Any, Optional, List, Union" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:65:0: E0401: Unable to import 'flask' (import-error)
client/backend/app.py-header-fix.py:65:0: C0413: Import "from flask import Flask, jsonify, request, send_from_directory" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:66:0: E0401: Unable to import 'flask_cors' (import-error)
client/backend/app.py-header-fix.py:66:0: C0413: Import "from flask_cors import CORS" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:67:0: C0413: Import "import psutil" should be placed at the top of the module (wrong-import-position)
client/backend/app.py-header-fix.py:81:4: C0116: Missing function or method docstring (missing-function-docstring)
client/backend/app.py-header-fix.py:81:20: W0613: Unused argument 'log_text' (unused-argument)
client/backend/app.py-header-fix.py:81:30: W0613: Unused argument 'model_name' (unused-argument)
client/backend/app.py-header-fix.py:81:53: W0613: Unused argument 'instruction' (unused-argument)
client/backend/app.py-header-fix.py:84:4: C0116: Missing function or method docstring (missing-function-docstring)
client/backend/app.py-header-fix.py:59:0: W0611: Unused import json (unused-import)
client/backend/app.py-header-fix.py:60:0: W0611: Unused import time (unused-import)
client/backend/app.py-header-fix.py:61:0: W0611: Unused import traceback (unused-import)
client/backend/app.py-header-fix.py:62:0: W0611: Unused datetime imported from datetime (unused-import)
client/backend/app.py-header-fix.py:63:0: W0611: Unused Dict imported from typing (unused-import)
client/backend/app.py-header-fix.py:63:0: W0611: Unused Any imported from typing (unused-import)
client/backend/app.py-header-fix.py:63:0: W0611: Unused Optional imported from typing (unused-import)
client/backend/app.py-header-fix.py:63:0: W0611: Unused List imported from typing (unused-import)
client/backend/app.py-header-fix.py:63:0: W0611: Unused Union imported from typing (unused-import)
client/backend/app.py-header-fix.py:65:0: W0611: Unused Flask imported from flask (unused-import)
client/backend/app.py-header-fix.py:65:0: W0611: Unused jsonify imported from flask (unused-import)
client/backend/app.py-header-fix.py:65:0: W0611: Unused request imported from flask (unused-import)
client/backend/app.py-header-fix.py:65:0: W0611: Unused send_from_directory imported from flask (unused-import)
client/backend/app.py-header-fix.py:66:0: W0611: Unused CORS imported from flask_cors (unused-import)
client/backend/app.py-header-fix.py:67:0: W0611: Unused import psutil (unused-import)
************* Module client.backend.ai_model
client/backend/ai_model.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:138:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:146:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:149:0: C0301: Line too long (109/100) (line-too-long)
client/backend/ai_model.py:150:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:166:0: C0301: Line too long (114/100) (line-too-long)
client/backend/ai_model.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:172:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:190:0: C0301: Line too long (114/100) (line-too-long)
client/backend/ai_model.py:191:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:194:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:197:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:208:0: C0301: Line too long (121/100) (line-too-long)
client/backend/ai_model.py:216:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:222:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:228:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:232:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:241:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:249:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:270:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:274:0: C0301: Line too long (107/100) (line-too-long)
client/backend/ai_model.py:294:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:309:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:316:0: C0301: Line too long (110/100) (line-too-long)
client/backend/ai_model.py:333:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:336:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:339:0: C0301: Line too long (102/100) (line-too-long)
client/backend/ai_model.py:353:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:360:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:374:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:378:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:381:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:384:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:396:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:410:0: C0301: Line too long (106/100) (line-too-long)
client/backend/ai_model.py:413:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:426:0: C0301: Line too long (110/100) (line-too-long)
client/backend/ai_model.py:432:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:444:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:465:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:475:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:480:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:482:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:492:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:495:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:500:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/ai_model.py:33:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
client/backend/ai_model.py:48:4: W0107: Unnecessary pass statement (unnecessary-pass)
client/backend/ai_model.py:116:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
client/backend/ai_model.py:127:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:130:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:152:12: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:137:12: C0415: Import outside toplevel (gpt4all.GPT4All) (import-outside-toplevel)
client/backend/ai_model.py:149:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:153:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:159:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:169:12: C0415: Import outside toplevel (openai) (import-outside-toplevel)
client/backend/ai_model.py:178:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/ai_model.py:179:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:193:12: C0415: Import outside toplevel (google.generativeai) (import-outside-toplevel)
client/backend/ai_model.py:202:19: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/ai_model.py:203:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:258:12: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:214:12: C0415: Import outside toplevel (transformers.AutoModelForCausalLM, transformers.AutoTokenizer, transformers.pipeline) (import-outside-toplevel)
client/backend/ai_model.py:215:12: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/ai_model.py:225:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:234:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:243:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:271:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:277:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:299:16: C0415: Import outside toplevel (gpt4all) (import-outside-toplevel)
client/backend/ai_model.py:301:16: C0415: Import outside toplevel (openai) (import-outside-toplevel)
client/backend/ai_model.py:303:16: C0415: Import outside toplevel (google.generativeai) (import-outside-toplevel)
client/backend/ai_model.py:305:16: C0415: Import outside toplevel (transformers) (import-outside-toplevel)
client/backend/ai_model.py:306:16: C0415: Import outside toplevel (torch) (import-outside-toplevel)
client/backend/ai_model.py:299:16: W0611: Unused import gpt4all (unused-import)
client/backend/ai_model.py:301:16: W0611: Unused import openai (unused-import)
client/backend/ai_model.py:303:16: W0611: Unused import google.generativeai (unused-import)
client/backend/ai_model.py:305:16: W0611: Unused import transformers (unused-import)
client/backend/ai_model.py:306:16: W0611: Unused import torch (unused-import)
client/backend/ai_model.py:332:4: W0621: Redefining name 'models' from outer scope (line 484) (redefined-outer-name)
client/backend/ai_model.py:339:16: W0621: Redefining name 'log_text' from outer scope (line 499) (redefined-outer-name)
client/backend/ai_model.py:380:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:400:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/ai_model.py:386:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
client/backend/ai_model.py:398:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:401:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:339:0: R0911: Too many return statements (8/6) (too-many-return-statements)
client/backend/ai_model.py:356:4: W0612: Unused variable 'truncated' (unused-variable)
client/backend/ai_model.py:405:26: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:416:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:435:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:442:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:447:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:455:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
client/backend/ai_model.py:468:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/ai_model.py:455:8: W0612: Unused variable 'model' (unused-variable)
client/backend/ai_model.py:455:15: W0612: Unused variable 'tokenizer' (unused-variable)
client/backend/ai_model.py:488:12: C0103: Constant name "status" doesn't conform to UPPER_CASE naming style (invalid-name)
client/backend/ai_model.py:489:12: C0103: Constant name "api_status" doesn't conform to UPPER_CASE naming style (invalid-name)
client/backend/ai_model.py:491:16: C0103: Constant name "api_status" doesn't conform to UPPER_CASE naming style (invalid-name)
client/backend/ai_model.py:507:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/ai_model.py:498:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
client/backend/ai_model.py:7:0: W0611: Unused import tempfile (unused-import)
client/backend/ai_model.py:8:0: W0611: Unused Union imported from typing (unused-import)
client/backend/ai_model.py:8:0: W0611: Unused Callable imported from typing (unused-import)
client/backend/ai_model.py:10:0: W0611: Unused field imported from dataclasses (unused-import)
client/backend/ai_model.py:12:0: W0611: Unused Path imported from pathlib (unused-import)
************* Module client.backend.gpt4allinit
client/backend/gpt4allinit.py:5:0: E0611: No name 'GPT4All' in module 'gpt4all' (no-name-in-module)
************* Module client.backend.gpt4all.app
client/backend/gpt4all/app.py:6:0: W0105: String statement has no effect (pointless-string-statement)
client/backend/gpt4all/app.py:12:0: C0413: Import "import importlib.metadata" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:13:0: C0413: Import "import io" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:14:0: C0413: Import "import sys" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:15:0: C0413: Import "from collections import namedtuple" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:16:0: C0413: Import "from typing_extensions import Annotated" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:18:0: E0401: Unable to import 'typer' (import-error)
client/backend/gpt4all/app.py:18:0: C0413: Import "import typer" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:19:0: C0413: Import "from gpt4all import GPT4All" should be placed at the top of the module (wrong-import-position)
client/backend/gpt4all/app.py:19:0: E0611: No name 'GPT4All' in module 'gpt4all' (no-name-in-module)
client/backend/gpt4all/app.py:94:8: W0621: Redefining name 'version' from outer scope (line 185) (redefined-outer-name)
client/backend/gpt4all/app.py:98:4: W0702: No exception type(s) specified (bare-except)
************* Module client.backend.hugging
client/backend/hugging.py:57:43: C0303: Trailing whitespace (trailing-whitespace)
client/backend/hugging.py:58:41: C0303: Trailing whitespace (trailing-whitespace)
client/backend/hugging.py:60:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/hugging.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/hugging.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/hugging.py:6:0: E0401: Unable to import 'huggingface_hub' (import-error)
client/backend/hugging.py:7:0: E0401: Unable to import 'transformers' (import-error)
client/backend/hugging.py:28:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/hugging.py:45:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/hugging.py:70:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/hugging.py:7:0: W0611: Unused AutoModelForCausalLM imported from transformers (unused-import)
client/backend/hugging.py:7:0: W0611: Unused AutoTokenizer imported from transformers (unused-import)
************* Module client.backend.gpt4all-log-analyzer
client/backend/gpt4all-log-analyzer.py:59:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:73:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:77:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:114:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:121:0: C0301: Line too long (108/100) (line-too-long)
client/backend/gpt4all-log-analyzer.py:124:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:132:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:164:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:168:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:182:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:190:0: C0301: Line too long (117/100) (line-too-long)
client/backend/gpt4all-log-analyzer.py:193:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:197:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:217:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:220:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:223:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:227:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:232:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:236:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:239:0: C0301: Line too long (110/100) (line-too-long)
client/backend/gpt4all-log-analyzer.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:261:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:272:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:276:74: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:278:56: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:280:53: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:282:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:284:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:287:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:293:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:296:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:304:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:309:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/gpt4all-log-analyzer.py:1:0: C0103: Module name "gpt4all-log-analyzer" doesn't conform to snake_case naming style (invalid-name)
client/backend/gpt4all-log-analyzer.py:87:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:75:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:83:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:88:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:145:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:122:31: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:121:36: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:123:28: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:105:8: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
client/backend/gpt4all-log-analyzer.py:141:31: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:140:32: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:142:28: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:146:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:201:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:196:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:202:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:226:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:264:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:262:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:265:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:271:4: C0415: Import outside toplevel (argparse) (import-outside-toplevel)
client/backend/gpt4all-log-analyzer.py:299:15: W0718: Catching too general exception Exception (broad-exception-caught)
client/backend/gpt4all-log-analyzer.py:300:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/gpt4all-log-analyzer.py:307:26: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
client/backend/gpt4all-log-analyzer.py:12:0: W0611: Unused Any imported from typing (unused-import)
client/backend/gpt4all-log-analyzer.py:12:0: W0611: Unused List imported from typing (unused-import)
client/backend/gpt4all-log-analyzer.py:12:0: W0611: Unused Union imported from typing (unused-import)
client/backend/gpt4all-log-analyzer.py:13:0: W0611: Unused import re (unused-import)
************* Module client.backend.path-fixer-module
client/backend/path-fixer-module.py:29:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:40:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:46:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:56:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:86:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:142:0: C0303: Trailing whitespace (trailing-whitespace)
client/backend/path-fixer-module.py:1:0: C0103: Module name "path-fixer-module" doesn't conform to snake_case naming style (invalid-name)
client/backend/path-fixer-module.py:65:8: W0621: Redefining name 'path' from outer scope (line 140) (redefined-outer-name)
client/backend/path-fixer-module.py:55:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/path-fixer-module.py:68:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/path-fixer-module.py:70:26: W0621: Redefining name 'module_name' from outer scope (line 145) (redefined-outer-name)
client/backend/path-fixer-module.py:82:8: W0621: Redefining name 'module' from outer scope (line 146) (redefined-outer-name)
client/backend/path-fixer-module.py:99:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/path-fixer-module.py:102:27: W0621: Redefining name 'module_name' from outer scope (line 145) (redefined-outer-name)
client/backend/path-fixer-module.py:114:8: W0621: Redefining name 'module' from outer scope (line 146) (redefined-outer-name)
client/backend/path-fixer-module.py:131:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/backend/path-fixer-module.py:147:8: C0103: Constant name "status" doesn't conform to UPPER_CASE naming style (invalid-name)
************* Module client.frontend.twitchbot
client/frontend/twitchbot.py:5:0: E0401: Unable to import 'twitchio.ext' (import-error)
client/frontend/twitchbot.py:6:0: C0411: standard import "os" should be placed before third party import "twitchio.ext.commands" (wrong-import-order)
************* Module client.frontend.gpt4all-integration
client/frontend/gpt4all-integration.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:51:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:60:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:62:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:101:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:105:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:109:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:112:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:115:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:119:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:122:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:124:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:126:0: C0301: Line too long (105/100) (line-too-long)
client/frontend/gpt4all-integration.py:128:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:146:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:148:0: C0301: Line too long (105/100) (line-too-long)
client/frontend/gpt4all-integration.py:162:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:168:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:171:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:173:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:177:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:195:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:201:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:203:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:207:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:222:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:226:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:231:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:235:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:240:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:243:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:246:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:249:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:251:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:254:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:266:0: C0303: Trailing whitespace (trailing-whitespace)
client/frontend/gpt4all-integration.py:1:0: C0103: Module name "gpt4all-integration" doesn't conform to snake_case naming style (invalid-name)
client/frontend/gpt4all-integration.py:38:4: W0107: Unnecessary pass statement (unnecessary-pass)
client/frontend/gpt4all-integration.py:63:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/frontend/gpt4all-integration.py:64:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:114:8: W0621: Redefining name 'model' from outer scope (line 264) (redefined-outer-name)
client/frontend/gpt4all-integration.py:99:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:108:8: C0415: Import outside toplevel (gpt4all.GPT4All) (import-outside-toplevel)
client/frontend/gpt4all-integration.py:110:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:121:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:127:8: W0707: Consider explicitly re-raising using 'except ImportError as exc' and 'raise ImportError('GPT4All package not installed') from exc' (raise-missing-from)
client/frontend/gpt4all-integration.py:130:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:145:8: W0621: Redefining name 'model' from outer scope (line 264) (redefined-outer-name)
client/frontend/gpt4all-integration.py:182:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/frontend/gpt4all-integration.py:164:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:170:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:175:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:179:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:183:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:197:8: W0621: Redefining name 'models' from outer scope (line 262) (redefined-outer-name)
client/frontend/gpt4all-integration.py:208:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/frontend/gpt4all-integration.py:194:8: C0415: Import outside toplevel (gpt4all.GPT4All) (import-outside-toplevel)
client/frontend/gpt4all-integration.py:209:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
client/frontend/gpt4all-integration.py:194:8: W0611: Unused GPT4All imported from gpt4all (unused-import)
client/frontend/gpt4all-integration.py:220:8: W0621: Redefining name 'model' from outer scope (line 264) (redefined-outer-name)
client/frontend/gpt4all-integration.py:255:11: W0718: Catching too general exception Exception (broad-exception-caught)
client/frontend/gpt4all-integration.py:9:0: W0611: Unused import json (unused-import)
client/frontend/gpt4all-integration.py:10:0: W0611: Unused Union imported from typing (unused-import)
************* Module patch.ailinux-alpha-code-patcher-v0.3
patch/ailinux-alpha-code-patcher-v0.3.py:1:0: C0103: Module name "3" doesn't conform to snake_case naming style (invalid-name)
patch/ailinux-alpha-code-patcher-v0.3.py:59:11: W0718: Catching too general exception Exception (broad-exception-caught)
patch/ailinux-alpha-code-patcher-v0.3.py:94:11: W0718: Catching too general exception Exception (broad-exception-caught)
patch/ailinux-alpha-code-patcher-v0.3.py:200:11: W0718: Catching too general exception Exception (broad-exception-caught)
patch/ailinux-alpha-code-patcher-v0.3.py:590:11: W0718: Catching too general exception Exception (broad-exception-caught)
patch/ailinux-alpha-code-patcher-v0.3.py:614:11: W0718: Catching too general exception Exception (broad-exception-caught)
patch/ailinux-alpha-code-patcher-v0.3.py:598:8: C0415: Import outside toplevel (subprocess) (import-outside-toplevel)
patch/ailinux-alpha-code-patcher-v0.3.py:601:17: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
patch/ailinux-alpha-code-patcher-v0.3.py:603:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
************* Module python-optimizer
python-optimizer.py:67:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:71:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:73:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:85:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:111:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:115:86: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:116:0: C0301: Line too long (215/100) (line-too-long)
python-optimizer.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:120:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:122:48: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:123:0: C0301: Line too long (201/100) (line-too-long)
python-optimizer.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:157:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:164:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:170:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:184:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:191:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:194:33: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:195:93: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:200:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:219:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:221:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:226:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:230:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:234:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:238:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:246:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:261:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:267:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:276:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:279:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:286:0: C0303: Trailing whitespace (trailing-whitespace)
python-optimizer.py:1:0: C0103: Module name "python-optimizer" doesn't conform to snake_case naming style (invalid-name)
python-optimizer.py:48:17: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
python-optimizer.py:243:11: W0718: Catching too general exception Exception (broad-exception-caught)
python-optimizer.py:22:0: W0611: Unused Set imported from typing (unused-import)
python-optimizer.py:22:0: W0611: Unused Optional imported from typing (unused-import)
python-optimizer.py:22:0: W0611: Unused Any imported from typing (unused-import)
************* Module bigfiles
bigfiles.py:8:18: E0602: Undefined variable 'directory' (undefined-variable)
bigfiles.py:11:37: E0602: Undefined variable 'directory' (undefined-variable)
************* Module devtools.uploadready
devtools/uploadready.py:11:18: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:12:19: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:13:35: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:39:27: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:70:73: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:71:38: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:72:47: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:80:45: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:81:32: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:93:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:102:58: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:103:32: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:109:46: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:110:32: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:140:0: C0301: Line too long (111/100) (line-too-long)
devtools/uploadready.py:155:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:158:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:177:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:184:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:191:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:204:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:233:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:246:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:251:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:255:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:263:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:274:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:281:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:298:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:306:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:310:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:316:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:319:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:326:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:341:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:344:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:351:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:361:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:365:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:374:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:377:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:381:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:384:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:392:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:399:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:404:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:406:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:426:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:431:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:436:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:439:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:452:0: C0301: Line too long (113/100) (line-too-long)
devtools/uploadready.py:453:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:458:61: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:462:0: C0301: Line too long (108/100) (line-too-long)
devtools/uploadready.py:464:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:467:0: C0301: Line too long (105/100) (line-too-long)
devtools/uploadready.py:468:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:488:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:494:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:500:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:506:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:507:78: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:513:0: C0301: Line too long (108/100) (line-too-long)
devtools/uploadready.py:525:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/uploadready.py:1:0: C0114: Missing module docstring (missing-module-docstring)
devtools/uploadready.py:134:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:79:24: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
devtools/uploadready.py:101:22: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
devtools/uploadready.py:108:22: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
devtools/uploadready.py:118:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
devtools/uploadready.py:10:0: R0911: Too many return statements (9/6) (too-many-return-statements)
devtools/uploadready.py:56:12: W0612: Unused variable 'github_url' (unused-variable)
devtools/uploadready.py:208:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:189:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:190:21: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
devtools/uploadready.py:193:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
devtools/uploadready.py:197:18: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
devtools/uploadready.py:199:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:213:0: R0914: Too many local variables (21/15) (too-many-locals)
devtools/uploadready.py:407:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:295:19: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:289:31: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:300:8: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
devtools/uploadready.py:312:14: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
devtools/uploadready.py:324:12: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
devtools/uploadready.py:328:8: C0415: Import outside toplevel (json) (import-outside-toplevel)
devtools/uploadready.py:329:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:349:12: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
devtools/uploadready.py:353:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:372:16: C0415: Import outside toplevel (shutil) (import-outside-toplevel)
devtools/uploadready.py:375:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:394:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:409:8: C0415: Import outside toplevel (traceback) (import-outside-toplevel)
devtools/uploadready.py:213:0: R0915: Too many statements (95/50) (too-many-statements)
devtools/uploadready.py:440:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:434:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:434:44: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
devtools/uploadready.py:536:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/uploadready.py:7:0: W0611: Unused Dict imported from typing (unused-import)
devtools/uploadready.py:7:0: W0611: Unused Any imported from typing (unused-import)
************* Module devtools.bigfiles
devtools/bigfiles.py:8:18: E0602: Undefined variable 'directory' (undefined-variable)
devtools/bigfiles.py:11:37: E0602: Undefined variable 'directory' (undefined-variable)
************* Module devtools.enhanced-pylint-fixer
devtools/enhanced-pylint-fixer.py:55:72: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:132:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:144:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:178:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:197:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:201:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:203:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:211:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:221:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:231:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:235:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:244:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:247:0: C0301: Line too long (110/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:254:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:266:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:284:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:292:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:300:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:304:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:306:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:310:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:322:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:330:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:338:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:342:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:344:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:354:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:362:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:371:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:377:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:393:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:415:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:419:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:467:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:469:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:486:0: C0301: Line too long (132/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:494:0: C0301: Line too long (111/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:502:0: C0301: Line too long (108/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:524:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:526:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:532:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:542:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:552:0: C0301: Line too long (110/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:586:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:590:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:592:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:599:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:612:77: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:620:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:622:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:629:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:632:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:635:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:648:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:651:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:658:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:663:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:675:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:682:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:685:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:693:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:696:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:701:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:713:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:718:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:732:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:743:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:747:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:758:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:766:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:771:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:784:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:796:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:818:0: C0301: Line too long (119/100) (line-too-long)
devtools/enhanced-pylint-fixer.py:826:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:844:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:848:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:852:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:855:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:858:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:861:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:871:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:875:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:880:15: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:881:29: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:885:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:889:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:892:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:901:0: C0303: Trailing whitespace (trailing-whitespace)
devtools/enhanced-pylint-fixer.py:1:0: C0103: Module name "enhanced-pylint-fixer" doesn't conform to snake_case naming style (invalid-name)
devtools/enhanced-pylint-fixer.py:29:0: R0903: Too few public methods (1/2) (too-few-public-methods)
devtools/enhanced-pylint-fixer.py:52:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
devtools/enhanced-pylint-fixer.py:109:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:130:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:141:23: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/enhanced-pylint-fixer.py:142:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:155:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:163:19: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/enhanced-pylint-fixer.py:160:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:164:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:182:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:189:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:215:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:192:4: R0911: Too many return statements (9/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:247:4: R0911: Too many return statements (7/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:247:38: W0613: Unused argument 'issue' (unused-argument)
devtools/enhanced-pylint-fixer.py:333:4: R0911: Too many return statements (7/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:430:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:440:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:403:4: R0911: Too many return statements (8/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:482:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
devtools/enhanced-pylint-fixer.py:451:4: R0911: Too many return statements (7/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:508:4: R0914: Too many local variables (20/15) (too-many-locals)
devtools/enhanced-pylint-fixer.py:508:4: R0911: Too many return statements (7/6) (too-many-return-statements)
devtools/enhanced-pylint-fixer.py:508:4: R0912: Too many branches (13/12) (too-many-branches)
devtools/enhanced-pylint-fixer.py:684:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:695:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:700:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:708:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:712:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:737:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:742:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
devtools/enhanced-pylint-fixer.py:666:4: R0912: Too many branches (22/12) (too-many-branches)
devtools/enhanced-pylint-fixer.py:753:14: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
devtools/enhanced-pylint-fixer.py:750:4: R0912: Too many branches (14/12) (too-many-branches)
devtools/enhanced-pylint-fixer.py:903:11: W0718: Catching too general exception Exception (broad-exception-caught)
devtools/enhanced-pylint-fixer.py:905:8: C0415: Import outside toplevel (traceback) (import-outside-toplevel)
devtools/enhanced-pylint-fixer.py:26:0: W0611: Unused Tuple imported from typing (unused-import)
************* Module devtools.adjust_hierarchy_with_debugger
devtools/adjust_hierarchy_with_debugger.py:69:32: E0602: Undefined variable 'base_dir' (undefined-variable)
************* Module devtools.analyze
devtools/analyze.py:19:10: E0602: Undefined variable 'log_file_path' (undefined-variable)
devtools/analyze.py:20:37: E0602: Undefined variable 'root_dir' (undefined-variable)
************* Module adjust_hierarchy_with_debugger
adjust_hierarchy_with_debugger.py:69:32: E0602: Undefined variable 'base_dir' (undefined-variable)
************* Module server.backend.websocket-server
server/backend/websocket-server.py:22:0: C0301: Line too long (102/100) (line-too-long)
server/backend/websocket-server.py:56:0: C0301: Line too long (102/100) (line-too-long)
server/backend/websocket-server.py:80:0: C0301: Line too long (103/100) (line-too-long)
server/backend/websocket-server.py:168:0: C0301: Line too long (101/100) (line-too-long)
server/backend/websocket-server.py:254:0: C0301: Line too long (108/100) (line-too-long)
server/backend/websocket-server.py:293:0: C0301: Line too long (103/100) (line-too-long)
server/backend/websocket-server.py:347:0: C0301: Line too long (102/100) (line-too-long)
server/backend/websocket-server.py:375:0: C0301: Line too long (104/100) (line-too-long)
server/backend/websocket-server.py:396:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:399:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:407:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:417:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:422:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:449:0: C0301: Line too long (112/100) (line-too-long)
server/backend/websocket-server.py:458:0: C0301: Line too long (129/100) (line-too-long)
server/backend/websocket-server.py:470:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:473:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/websocket-server.py:499:0: C0301: Line too long (117/100) (line-too-long)
server/backend/websocket-server.py:1:0: C0103: Module name "websocket-server" doesn't conform to snake_case naming style (invalid-name)
server/backend/websocket-server.py:23:4: W0707: Consider explicitly re-raising using 'except ImportError as exc' and 'raise ImportError('ai_model module not found') from exc' (raise-missing-from)
server/backend/websocket-server.py:45:11: W1508: os.getenv default type is builtins.int. Expected str or None. (invalid-envvar-default)
server/backend/websocket-server.py:65:0: C0103: Constant name "analysis_semaphore" doesn't conform to UPPER_CASE naming style (invalid-name)
server/backend/websocket-server.py:86:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:107:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:193:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:201:0: R0913: Too many arguments (6/5) (too-many-arguments)
server/backend/websocket-server.py:256:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:254:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:257:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:268:19: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:269:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:376:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:296:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:309:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:317:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:333:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:366:19: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:347:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:360:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:367:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:375:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:377:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:385:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:284:0: R0912: Too many branches (14/12) (too-many-branches)
server/backend/websocket-server.py:284:0: R0915: Too many statements (53/50) (too-many-statements)
server/backend/websocket-server.py:284:40: W0613: Unused argument 'path' (unused-argument)
server/backend/websocket-server.py:420:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:415:31: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:416:28: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:390:4: R1702: Too many nested blocks (7/5) (too-many-nested-blocks)
server/backend/websocket-server.py:419:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:421:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:460:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:440:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:458:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:461:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:469:4: W0603: Using the global statement (global-statement)
server/backend/websocket-server.py:483:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:485:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:489:15: E1101: Module 'websockets' has no 'serve' member (no-member)
server/backend/websocket-server.py:499:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:502:8: W0612: Unused variable 'cleanup_task' (unused-variable)
server/backend/websocket-server.py:503:8: W0612: Unused variable 'heartbeat_task' (unused-variable)
server/backend/websocket-server.py:535:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/websocket-server.py:524:8: C0116: Missing function or method docstring (missing-function-docstring)
server/backend/websocket-server.py:536:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/websocket-server.py:16:0: C0411: standard import "datetime.datetime" should be placed before third party import "websockets" (wrong-import-order)
server/backend/websocket-server.py:14:0: W0611: Unused Set imported from typing (unused-import)
server/backend/websocket-server.py:14:0: W0611: Unused Optional imported from typing (unused-import)
server/backend/websocket-server.py:16:0: W0611: Unused datetime imported from datetime (unused-import)
server/backend/websocket-server.py:16:0: W0611: Unused timedelta imported from datetime (unused-import)
************* Module server.backend.app
server/backend/app.py:73:0: C0301: Line too long (102/100) (line-too-long)
server/backend/app.py:13:0: E0401: Unable to import 'flask' (import-error)
server/backend/app.py:14:0: E0401: Unable to import 'flask_cors' (import-error)
server/backend/app.py:15:0: E0401: Unable to import 'dotenv' (import-error)
server/backend/app.py:28:11: W1508: os.getenv default type is builtins.int. Expected str or None. (invalid-envvar-default)
server/backend/app.py:88:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:72:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:73:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:80:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:92:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:112:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:113:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:127:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:128:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:149:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:150:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:171:12: W0621: Redefining name 'json' from outer scope (line 10) (redefined-outer-name)
server/backend/app.py:177:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:171:12: W0404: Reimport 'json' (imported line 10) (reimported)
server/backend/app.py:171:12: C0415: Import outside toplevel (json) (import-outside-toplevel)
server/backend/app.py:175:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:178:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:204:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:182:12: W0404: Reimport 'json' (imported line 10) (reimported)
server/backend/app.py:182:12: C0415: Import outside toplevel (json) (import-outside-toplevel)
server/backend/app.py:183:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
server/backend/app.py:205:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:255:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/app.py:256:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:269:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:270:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/app.py:10:0: W0611: Unused import json (unused-import)
server/backend/app.py:11:0: W0611: Unused import time (unused-import)
server/backend/app.py:13:0: W0611: Unused send_from_directory imported from flask (unused-import)
************* Module server.backend.ai_model
server/backend/ai_model.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:138:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:146:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:149:0: C0301: Line too long (109/100) (line-too-long)
server/backend/ai_model.py:150:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:166:0: C0301: Line too long (114/100) (line-too-long)
server/backend/ai_model.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:172:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:190:0: C0301: Line too long (114/100) (line-too-long)
server/backend/ai_model.py:191:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:194:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:197:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:208:0: C0301: Line too long (121/100) (line-too-long)
server/backend/ai_model.py:216:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:222:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:228:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:232:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:241:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:249:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:270:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:274:0: C0301: Line too long (107/100) (line-too-long)
server/backend/ai_model.py:294:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:309:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:316:0: C0301: Line too long (110/100) (line-too-long)
server/backend/ai_model.py:333:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:336:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:339:0: C0301: Line too long (102/100) (line-too-long)
server/backend/ai_model.py:353:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:360:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:374:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:378:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:381:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:384:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:396:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:410:0: C0301: Line too long (106/100) (line-too-long)
server/backend/ai_model.py:413:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:426:0: C0301: Line too long (110/100) (line-too-long)
server/backend/ai_model.py:432:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:444:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:465:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:475:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:480:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:482:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:492:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:495:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:500:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/ai_model.py:33:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
server/backend/ai_model.py:48:4: W0107: Unnecessary pass statement (unnecessary-pass)
server/backend/ai_model.py:116:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
server/backend/ai_model.py:127:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:130:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:152:12: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:137:12: C0415: Import outside toplevel (gpt4all.GPT4All) (import-outside-toplevel)
server/backend/ai_model.py:149:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:153:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:159:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:169:12: C0415: Import outside toplevel (openai) (import-outside-toplevel)
server/backend/ai_model.py:178:19: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/ai_model.py:179:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:193:12: C0415: Import outside toplevel (google.generativeai) (import-outside-toplevel)
server/backend/ai_model.py:202:19: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/ai_model.py:203:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:258:12: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:214:12: C0415: Import outside toplevel (transformers.AutoModelForCausalLM, transformers.AutoTokenizer, transformers.pipeline) (import-outside-toplevel)
server/backend/ai_model.py:215:12: C0415: Import outside toplevel (torch) (import-outside-toplevel)
server/backend/ai_model.py:225:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:234:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:243:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:271:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:277:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:299:16: C0415: Import outside toplevel (gpt4all) (import-outside-toplevel)
server/backend/ai_model.py:301:16: C0415: Import outside toplevel (openai) (import-outside-toplevel)
server/backend/ai_model.py:303:16: C0415: Import outside toplevel (google.generativeai) (import-outside-toplevel)
server/backend/ai_model.py:305:16: C0415: Import outside toplevel (transformers) (import-outside-toplevel)
server/backend/ai_model.py:306:16: C0415: Import outside toplevel (torch) (import-outside-toplevel)
server/backend/ai_model.py:299:16: W0611: Unused import gpt4all (unused-import)
server/backend/ai_model.py:301:16: W0611: Unused import openai (unused-import)
server/backend/ai_model.py:303:16: W0611: Unused import google.generativeai (unused-import)
server/backend/ai_model.py:305:16: W0611: Unused import transformers (unused-import)
server/backend/ai_model.py:306:16: W0611: Unused import torch (unused-import)
server/backend/ai_model.py:332:4: W0621: Redefining name 'models' from outer scope (line 484) (redefined-outer-name)
server/backend/ai_model.py:339:16: W0621: Redefining name 'log_text' from outer scope (line 499) (redefined-outer-name)
server/backend/ai_model.py:380:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:400:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/ai_model.py:386:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
server/backend/ai_model.py:398:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:401:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:339:0: R0911: Too many return statements (8/6) (too-many-return-statements)
server/backend/ai_model.py:356:4: W0612: Unused variable 'truncated' (unused-variable)
server/backend/ai_model.py:405:26: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:416:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:435:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:442:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:447:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:455:8: W0621: Redefining name 'model' from outer scope (line 487) (redefined-outer-name)
server/backend/ai_model.py:468:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/ai_model.py:455:8: W0612: Unused variable 'model' (unused-variable)
server/backend/ai_model.py:455:15: W0612: Unused variable 'tokenizer' (unused-variable)
server/backend/ai_model.py:488:12: C0103: Constant name "status" doesn't conform to UPPER_CASE naming style (invalid-name)
server/backend/ai_model.py:489:12: C0103: Constant name "api_status" doesn't conform to UPPER_CASE naming style (invalid-name)
server/backend/ai_model.py:491:16: C0103: Constant name "api_status" doesn't conform to UPPER_CASE naming style (invalid-name)
server/backend/ai_model.py:507:15: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/ai_model.py:498:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
server/backend/ai_model.py:7:0: W0611: Unused import tempfile (unused-import)
server/backend/ai_model.py:8:0: W0611: Unused Union imported from typing (unused-import)
server/backend/ai_model.py:8:0: W0611: Unused Callable imported from typing (unused-import)
server/backend/ai_model.py:10:0: W0611: Unused field imported from dataclasses (unused-import)
server/backend/ai_model.py:12:0: W0611: Unused Path imported from pathlib (unused-import)
************* Module server.backend.gpt4allinit
server/backend/gpt4allinit.py:56:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:66:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:71:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:110:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:120:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:122:0: C0303: Trailing whitespace (trailing-whitespace)
server/backend/gpt4allinit.py:37:7: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/gpt4allinit.py:38:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/gpt4allinit.py:73:8: W0621: Redefining name 'model' from outer scope (line 121) (redefined-outer-name)
server/backend/gpt4allinit.py:77:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/gpt4allinit.py:65:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/gpt4allinit.py:69:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/gpt4allinit.py:78:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/gpt4allinit.py:81:15: W0621: Redefining name 'model' from outer scope (line 121) (redefined-outer-name)
server/backend/gpt4allinit.py:111:11: W0718: Catching too general exception Exception (broad-exception-caught)
server/backend/gpt4allinit.py:104:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
server/backend/gpt4allinit.py:112:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
server/backend/gpt4allinit.py:117:4: C0103: Constant name "custom_model_path" doesn't conform to UPPER_CASE naming style (invalid-name)
server/backend/gpt4allinit.py:124:8: C0103: Constant name "success" doesn't conform to UPPER_CASE naming style (invalid-name)
************* Module server.backend.gpt4all.app
server/backend/gpt4all/app.py:6:0: W0105: String statement has no effect (pointless-string-statement)
server/backend/gpt4all/app.py:12:0: C0413: Import "import importlib.metadata" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:13:0: C0413: Import "import io" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:14:0: C0413: Import "import sys" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:15:0: C0413: Import "from collections import namedtuple" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:16:0: C0413: Import "from typing_extensions import Annotated" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:18:0: E0401: Unable to import 'typer' (import-error)
server/backend/gpt4all/app.py:18:0: C0413: Import "import typer" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:19:0: C0413: Import "from gpt4all import GPT4All" should be placed at the top of the module (wrong-import-position)
server/backend/gpt4all/app.py:19:0: E0611: No name 'GPT4All' in module 'gpt4all' (no-name-in-module)
server/backend/gpt4all/app.py:94:8: W0621: Redefining name 'version' from outer scope (line 185) (redefined-outer-name)
server/backend/gpt4all/app.py:98:4: W0702: No exception type(s) specified (bare-except)
************* Module analyze
analyze.py:19:10: E0602: Undefined variable 'log_file_path' (undefined-variable)
analyze.py:20:37: E0602: Undefined variable 'root_dir' (undefined-variable)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.ai_model:[14:508]
==server.backend.ai_model:[14:508]
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logging.warning("dotenv package not installed, environment variables must be set manually")

# Configure logging with more structured approach
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("ai_model.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("AIModel")

@dataclass
class ModelConfig:
    """Configuration for AI models with robust type handling."""
    name: str
    api_key: Optional[str] = None
    model_path: Optional[str] = None
    model_id: Optional[str] = None
    cache_dir: str = "./models"
    device: str = "cpu"
    max_tokens: int = 2048
    temperature: float = 0.7
    timeout: int = 120  # Timeout in seconds for API calls
    retry_count: int = 2  # Number of retries for failed API calls

class ModelInitializationError(Exception):
    """Custom exception for model initialization failures."""
    pass

class AIModelManager:
    """Centralized manager for AI model initialization and management."""

    def __init__(self):
        """Initialize the AI Model Manager."""
        self._models: Dict[str, Any] = {}
        self._configs = self._load_model_configs()
        # Ensure model cache directory exists
        for config in self._configs.values():
            os.makedirs(os.path.expanduser(config.cache_dir), exist_ok=True)

    def _load_model_configs(self) -> Dict[str, ModelConfig]:
        """
        Load model configurations from environment variables.

        Returns:
            Dictionary of model configurations
        """
        models_cache_dir = os.getenv("MODELS_CACHE_DIR", "./models")

        return {
            "gpt4all": ModelConfig(
                name="gpt4all",
                model_path=os.getenv("LLAMA_MODEL_PATH", "Meta-Llama-3-8B-Instruct.Q4_0.gguf"),
                model_id="local/gpt4all",
                cache_dir=models_cache_dir
            ),
            "openai": ModelConfig(
                name="openai",
                api_key=os.getenv("OPENAI_API_KEY"),
                model_id=os.getenv("OPENAI_MODEL", "gpt-4"),
                cache_dir=models_cache_dir
            ),
            "gemini": ModelConfig(
                name="gemini",
                api_key=os.getenv("GEMINI_API_KEY"),
                model_id=os.getenv("GEMINI_MODEL", "gemini-pro"),
                cache_dir=models_cache_dir
            ),
            "huggingface": ModelConfig(
                name="huggingface",
                api_key=os.getenv("HUGGINGFACE_API_KEY"),
                model_id=os.getenv("HUGGINGFACE_MODEL_ID", "mistralai/Mistral-7B-Instruct-v0.2"),
                cache_dir=models_cache_dir
            )
        }

    @lru_cache(maxsize=4)
    def initialize_model(self, model_name: str) -> Any:
        """
        Initialize a specific AI model with caching and robust error handling.

        Args:
            model_name: Name of the model to initialize

        Returns:
            Initialized model instance

        Raises:
            ModelInitializationError: If model cannot be initialized
        """
        config = self._configs.get(model_name.lower())
        if not config:
            raise ModelInitializationError(f"Unknown model: {model_name}")

        try:
            if model_name.lower() == "gpt4all":
                return self._initialize_gpt4all(config)
            elif model_name.lower() == "openai":
                return self._initialize_openai(config)
            elif model_name.lower() == "gemini":
                return self._initialize_gemini(config)
            elif model_name.lower() == "huggingface":
                return self._initialize_huggingface(config)
            else:
                raise ModelInitializationError(f"Unsupported model type: {model_name}")
        except ImportError as e:
            logger.error(f"Required library not installed for {model_name}: {e}")
            raise ModelInitializationError(f"Missing library for {model_name} model: {e}") from e
        except Exception as e:
            logger.error(f"Model initialization failed for {model_name}: {e}")
            logger.debug(traceback.format_exc())
            raise ModelInitializationError(f"Failed to initialize {model_name} model: {e}") from e

    def _initialize_gpt4all(self, config: ModelConfig) -> Any:
        """Initialize GPT4All model with robust error handling."""
        try:
            from gpt4all import GPT4All

            # Handle relative and user paths
            model_path = os.path.expanduser(config.model_path)
            if not os.path.isabs(model_path):
                model_path = os.path.join(os.path.expanduser(config.cache_dir), model_path)

            # Ensure model directory exists
            os.makedirs(os.path.dirname(model_path), exist_ok=True)

            # Check if model file exists, if not inform the user
            if not os.path.exists(model_path):
                logger.warning(f"Model file not found at {model_path}. GPT4All will attempt to download it.")

            # Initialize model with specified parameters
            model = GPT4All(model_path)
            logger.info(f"GPT4All model loaded successfully from {model_path}")
            return model
        except ImportError:
            logger.error("GPT4All library not installed. Install it with 'pip install gpt4all'.")
            raise
        except Exception as e:
            logger.error(f"Error initializing GPT4All model: {e}")
            logger.debug(traceback.format_exc())
            raise

    def _initialize_openai(self, config: ModelConfig) -> Any:
        """Initialize OpenAI model with API key validation."""
        if not config.api_key:
            raise ModelInitializationError("OpenAI API key is required. Set OPENAI_API_KEY environment variable.")

        try:
            import openai
            # Set API key
            openai.api_key = config.api_key

            # Test connection by making a simple request
            try:
                # Use models.list as a simple API check
                openai.models.list()
                logger.info("OpenAI API connection verified successfully")
            except Exception as api_error:
                logger.warning(f"OpenAI API connection test failed: {api_error}")
                # Continue anyway as the key might still be valid for completions

            return openai
        except ImportError:
            logger.error("OpenAI library not installed. Install it with 'pip install openai'.")
            raise

    def _initialize_gemini(self, config: ModelConfig) -> Any:
        """Initialize Google Gemini model with API key validation."""
        if not config.api_key:
            raise ModelInitializationError("Gemini API key is required. Set GEMINI_API_KEY environment variable.")

        try:
            import google.generativeai as genai

            # Configure with API key
            genai.configure(api_key=config.api_key)

            # Test connection by listing models
            try:
                genai.list_models()
                logger.info("Gemini API connection verified successfully")
            except Exception as api_error:
                logger.warning(f"Gemini API connection test failed: {api_error}")
                # Continue anyway as the key might still be valid

            return genai
        except ImportError:
            logger.error("Google GenerativeAI library not installed. Install it with 'pip install google-generativeai'.")
            raise

    def _initialize_huggingface(self, config: ModelConfig) -> Tuple[Any, Any, Any]:
        """Initialize Hugging Face model with comprehensive setup."""
        try:
            from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
            import torch

            # Determine device
            if config.device == "auto":
                device = "cuda" if torch.cuda.is_available() else "cpu"
            else:
                device = config.device

            # Log device information
            if device == "cuda" and torch.cuda.is_available():
                logger.info(f"Using CUDA device: {torch.cuda.get_device_name(0)}")
            else:
                logger.info("Using CPU for inference")

            # Ensure cache directory exists
            cache_dir = os.path.expanduser(config.cache_dir)
            os.makedirs(cache_dir, exist_ok=True)

            # Load tokenizer
            logger.info(f"Loading tokenizer for model: {config.model_id}")
            tokenizer = AutoTokenizer.from_pretrained(
                config.model_id,
                cache_dir=cache_dir,
                token=config.api_key if config.api_key else None,
                local_files_only=False
            )

            # Load model with appropriate settings based on device
            logger.info(f"Loading model: {config.model_id}")
            model_loading_args = {
                "cache_dir": cache_dir,
                "token": config.api_key if config.api_key else None,
                "local_files_only": False
            }

            # Add device-specific optimizations
            if device == "cuda":
                model_loading_args.update({
                    "torch_dtype": torch.float16,  # Use half precision for GPU
                    "low_cpu_mem_usage": True,
                    "device_map": "auto"
                })

            model = AutoModelForCausalLM.from_pretrained(config.model_id, **model_loading_args)

            # Create text generation pipeline
            logger.info("Creating text generation pipeline")
            pipeline_model = pipeline(
                "text-generation",
                model=model,
                tokenizer=tokenizer,
                device=0 if device == "cuda" else -1,
                max_new_tokens=config.max_tokens,
                temperature=config.temperature
            )

            logger.info(f"HuggingFace model {config.model_id} initialized successfully on {device}")
            return model, tokenizer, pipeline_model
        except ImportError:
            logger.error("Transformers library not installed. Install it with 'pip install transformers'.")
            raise
        except Exception as e:
            logger.error(f"Error initializing HuggingFace model: {e}")
            logger.debug(traceback.format_exc())
            raise

    def get_model_info(self, model_name: str) -> Dict[str, Any]:
        """
        Retrieve information about a specific model.

        Args:
            model_name: Name of the model

        Returns:
            Dictionary with model information
        """
        config = self._configs.get(model_name.lower())
        if not config:
            return {"error": f"Unknown model: {model_name}"}

        # Check if model is available (libraries installed)
        available = True
        try:
            if model_name.lower() == "gpt4all":
                import gpt4all
            elif model_name.lower() == "openai":
                import openai
            elif model_name.lower() == "gemini":
                import google.generativeai
            elif model_name.lower() == "huggingface":
                import transformers
                import torch
        except ImportError:
            available = False

        return {
            "name": config.name,
            "model_id": config.model_id,
            "is_api_model": bool(config.api_key),
            "device": config.device,
            "available": available,
            "has_api_key": bool(config.api_key) if config.api_key is required_for_model(model_name) else True,
            "cache_dir": config.cache_dir
        }

def required_for_model(model_name: str) -> bool:
    """Check if an API key is required for a specific model."""
    return model_name.lower() in ["openai", "gemini", "huggingface"]

def get_available_models() -> List[Dict[str, Any]]:
    """
    Get information about all available models.

    Returns:
        List of dictionaries with model information
    """
    manager = AIModelManager()
    models = []

    for model_name in ["gpt4all", "openai", "gemini", "huggingface"]:
        models.append(manager.get_model_info(model_name))

    return models

def analyze_log(log_text: str, model_name: str = "gpt4all", instruction: Optional[str] = None) -> str:
    """
    Analyze a log using the specified AI model.

    Args:
        log_text: The log text to analyze
        model_name: Name of the model to use
        instruction: Optional custom instruction for the analysis

    Returns:
        Analysis result as string
    """
    if not log_text:
        return "Error: No log text provided for analysis."

    # Limit log text length if necessary to prevent excessive token usage
    max_log_length = 8000  # Characters, adjust based on model capabilities
    truncated = False
    if len(log_text) > max_log_length:
        log_text = log_text[:max_log_length] + "..."
        truncated = True

    # Default system prompt for log analysis
    system_prompt = """You are an AI assistant specialized in analyzing logs and providing insights.
Given a log snippet, your task is to:
1. Summarize the key information in the log
2. Identify any errors, warnings, or issues
3. Explain potential causes for the identified problems
4. Suggest troubleshooting steps or solutions

Be concise and precise in your analysis."""

    # Use custom instruction if provided
    if instruction:
        system_prompt = instruction

    try:
        # Initialize the model manager
        manager = AIModelManager()

        # Get the model based on name
        model = manager.initialize_model(model_name)

        # Build full prompt
        prompt = f"{system_prompt}\n\nLOG:\n{log_text}\n\nANALYSIS:"

        # Generate analysis based on model type
        if model_name.lower() == "gpt4all":
            return _analyze_with_gpt4all(model, prompt)
        elif model_name.lower() == "openai":
            return _analyze_with_openai(model, prompt)
        elif model_name.lower() == "gemini":
            return _analyze_with_gemini(model, prompt)
        elif model_name.lower() == "huggingface":
            return _analyze_with_huggingface(model, prompt)
        else:
            return f"Error: Unsupported model type: {model_name}"

    except ModelInitializationError as e:
        logger.error(f"Model initialization error: {e}")
        return f"Error initializing model: {str(e)}"
    except Exception as e:
        logger.error(f"Error analyzing log with {model_name}: {e}")
        logger.debug(traceback.format_exc())
        return f"Error analyzing log: {str(e)}"

def _analyze_with_gpt4all(model, prompt: str) -> str:
    """Generate analysis using GPT4All model."""
    try:
        # Use chat completion API
        response = model.chat_completion([
            {"role": "system", "content": "You are a helpful AI assistant specializing in log analysis."},
            {"role": "user", "content": prompt}
        ])

        return response['choices'][0]['message']['content']
    except Exception as e:
        logger.error(f"Error in GPT4All analysis: {e}")
        logger.debug(traceback.format_exc())
        raise

def _analyze_with_openai(openai_client, prompt: str) -> str:
    """Generate analysis using OpenAI API."""
    try:
        response = openai_client.chat.completions.create(
            model=os.getenv("OPENAI_MODEL", "gpt-4"),
            messages=[
                {"role": "system", "content": "You are a helpful AI assistant specializing in log analysis."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error in OpenAI analysis: {e}")
        logger.debug(traceback.format_exc())
        raise

def _analyze_with_gemini(genai, prompt: str) -> str:
    """Generate analysis using Google Gemini API."""
    try:
        model = genai.GenerativeModel(os.getenv("GEMINI_MODEL", "gemini-pro"))
        response = model.generate_content(prompt)

        return response.text
    except Exception as e:
        logger.error(f"Error in Gemini analysis: {e}")
        logger.debug(traceback.format_exc())
        raise

def _analyze_with_huggingface(model_tuple, prompt: str) -> str:
    """Generate analysis using HuggingFace model."""
    try:
        # Unpack the model tuple
        model, tokenizer, pipeline_model = model_tuple

        # Generate text
        response = pipeline_model(
            prompt,
            do_sample=True,
            top_p=0.95,
            temperature=0.7,
            return_full_text=False
        )

        return response[0]['generated_text']
    except Exception as e:
        logger.error(f"Error in HuggingFace analysis: {e}")
        logger.debug(traceback.format_exc())
        raise

if __name__ == "__main__":
    # Simple CLI for testing the module
    import argparse

    parser = argparse.ArgumentParser(description="AILinux Model Manager CLI")
    parser.add_argument("--list-models", action="store_true", help="List available models")
    parser.add_argument("--analyze", type=str, help="Analyze log file")
    parser.add_argument("--model", type=str, default="gpt4all", help="Model to use for analysis")

    args = parser.parse_args()

    if args.list_models:
        models = get_available_models()
        print("\nAvailable AI Models:")
        print("===================")
        for model in models:
            status = "✓ Available" if model["available"] else "✗ Not available"
            api_status = ""
            if model["is_api_model"]:
                api_status = "✓ API Key Set" if model["has_api_key"] else "✗ API Key Missing"

            print(f"{model['name']} ({model['model_id']}): {status} {api_status}")
        print()

    if args.analyze:
        try:
            with open(args.analyze, 'r') as f:
                log_text = f.read()

            print(f"\nAnalyzing log with {args.model}...\n")
            result = analyze_log(log_text, args.model)
            print(result)
            print()
        except FileNotFoundError:
            print(f"Error: File not found: {args.analyze}")
        except Exception as e:
            print(f"Error: {e}") (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==devtools.uploadready:[37:541]
==uploadready:[37:541]
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filename='github_sync.log'
    )
    logger = logging.getLogger(__name__)

    try:
        # Validate inputs
        if not username or not repo_name:
            logger.error("GitHub username or repository name is missing")
            return False

        # Prepare GitHub URL
        if use_pat:
            if not auth_key:
                logger.error("Personal Access Token is required when use_pat is True")
                return False
            github_url = f"https://{username}:{auth_key}@github.com/{username}/{repo_name}.git"
        else:
            # For SSH, ensure the key is set up correctly
            if not os.path.exists(os.path.expanduser("~/.ssh/id_rsa")):
                logger.error("SSH key not found. Please set up SSH authentication.")
                return False
            github_url = f"git@github.com:{username}/{repo_name}.git"

        # Ensure git configuration
        subprocess.run(["git", "config", "--global", "pull.rebase", "true"], check=True)
        subprocess.run(["git", "config", "--global", "push.autoSetupRemote", "true"], check=True)

        # Check if git repository exists
        try:
            subprocess.run(["git", "rev-parse", "--is-inside-work-tree"],
                           check=True,
                           capture_output=True,
                           text=True)
        except subprocess.CalledProcessError:
            logger.error("Not a git repository. Please initialize git first.")
            return False

        # Check for uncommitted changes
        status_result = subprocess.run(
            ["git", "status", "--porcelain"],
            capture_output=True,
            text=True
        )

        # Stage and commit changes if there are any
        if status_result.stdout.strip():
            logger.info("Uncommitted changes detected. Staging and committing.")
            subprocess.run(["git", "add", "."], check=True)

            # Create a timestamp-based commit message
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            commit_message = f"Automated commit: {timestamp}"

            subprocess.run(["git", "commit", "-m", commit_message], check=True)

        # Ensure the correct branch is checked out
        subprocess.run(["git", "checkout", branch], check=True)

        # Fetch and pull with rebase
        subprocess.run(["git", "fetch", "origin", branch], check=True)
        pull_result = subprocess.run(
            ["git", "pull", "--rebase", "origin", branch],
            capture_output=True,
            text=True
        )

        # Push changes
        push_result = subprocess.run(
            ["git", "push", "origin", branch],
            capture_output=True,
            text=True
        )

        # Log detailed results
        logger.info("Pull result: %s", pull_result.stdout)
        logger.info("Push result: %s", push_result.stdout)

        if pull_result.returncode == 0 and push_result.returncode == 0:
            logger.info("GitHub synchronization completed successfully.")
            return True
        else:
            logger.error("Sync failed. Pull stderr: %s", pull_result.stderr)
            logger.error("Sync failed. Push stderr: %s", push_result.stderr)
            return False

    except subprocess.CalledProcessError as e:
        logger.error("Git command failed: %s", e)
        logger.error("Command output: %s", e.output)
        return False
    except (ValueError, ConnectionError) as e:
        # Specific handling for network errors and value errors
        logger.error("Network or connection error during GitHub synchronization: %s", e)
        return False
    except Exception as e:
        # More specific exception handling for unexpected errors
        logger.error("Unexpected error during GitHub synchronization: %s", e)
        return False


def validate_inputs(username: str, repo_name: str, auth_key: Optional[str], use_pat: bool) -> Tuple[bool, str]:
    """
    Validate user inputs for GitHub synchronization.

    Args:
        username (str): GitHub username
        repo_name (str): GitHub repository name
        auth_key (Optional[str]): Authentication key
        use_pat (bool): Flag indicating PAT usage

    Returns:
        Tuple[bool, str]: Success status and error message if any
    """
    if not username or not username.strip():
        return False, "Username cannot be empty"

    if not repo_name or not repo_name.strip():
        return False, "Repository name cannot be empty"

    if use_pat and not auth_key:
        return False, "Personal Access Token is required when using PAT authentication"

    return True, ""


def run_pylint(files: Optional[List[str]] = None) -> bool:
    """
    Run pylint on specified files or the entire project.

    Args:
        files: Optional list of files to check, defaults to all Python files

    Returns:
        bool: True if pylint succeeded with no errors, False otherwise
    """
    try:
        print("Running pylint code quality check...")

        # Determine which files to check
        if not files:
            # Get all Python files in the current directory
            cmd = ["find", ".", "-name", "*.py", "-not", "-path", "*/\\.*"]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            files = result.stdout.strip().split('\n')

        # Run pylint on the files
        cmd = ["pylint"] + files + ["--output-format=text", "--reports=y"]

        # Save results to a log file
        with open("optimization.log", "w") as log_file:
            result = subprocess.run(cmd, stdout=log_file, stderr=subprocess.PIPE, text=True)

        # Check results
        if result.returncode == 0:
            print("✓ No pylint issues found.")
            return True
        else:
            print(f"✗ Pylint found issues. Check optimization.log for details.")
            # Print a summary of the issues
            with open("optimization.log", "r") as log_file:
                summary = log_file.readlines()[-10:]  # Last 10 lines typically contain the summary
                for line in summary:
                    print(line.strip())
            return False

    except subprocess.CalledProcessError as e:
        print(f"Error running pylint: {e}")
        return False
    except Exception as e:
        print(f"Unexpected error during pylint check: {e}")
        return False


def file_update(start_dir: str = ".", backup: bool = True) -> bool:
    """
    Analyze directory structure and handle large files.

    This function:
    1. Recursively scans the directory structure including all subfolders
    2. Creates directory_structure.json with the complete file structure
    3. Identifies files larger than 99MB and saves them to large_files.json
    4. Updates .gitignore to include these large files

    Args:
        start_dir: Directory to start the analysis from (default: current directory)
        backup: Whether to create backups of modified files

    Returns:
        bool: True if all operations succeeded, False otherwise
    """
    try:
        print(f"Starting recursive file structure analysis from {start_dir}")
        print("This will scan all subfolders and files in the directory tree.")

        # Structure to hold directory information
        dir_structure = {}
        # List to hold large files (>99MB)
        large_files = []
        # Size threshold for large files (99MB in bytes)
        size_threshold = 99 * 1024 * 1024
        # Counter for statistics
        stats = {
            "total_dirs": 0,
            "total_files": 0,
            "total_size": 0
        }

        # Function to scan directory recursively
        def scan_directory(path, structure):
            """Recursively scan directory and build structure dict"""
            nonlocal stats

            try:
                items = os.listdir(path)
                stats["total_dirs"] += 1

                for item in items:
                    full_path = os.path.join(path, item)
                    rel_path = os.path.relpath(full_path, start_dir)

                    # Skip hidden files/folders
                    if item.startswith('.'):
                        continue

                    if os.path.isdir(full_path):
                        # It's a directory
                        structure[item] = {"type": "directory", "contents": {}}
                        scan_directory(full_path, structure[item]["contents"])
                    else:
                        # It's a file
                        try:
                            file_size = os.path.getsize(full_path)
                            stats["total_files"] += 1
                            stats["total_size"] += file_size

                            # Add to structure
                            structure[item] = {
                                "type": "file",
                                "size": file_size,
                                "size_human": format_size(file_size)
                            }

                            # Check if it's a large file
                            if file_size > size_threshold:
                                large_files.append({
                                    "path": rel_path,
                                    "size": file_size,
                                    "size_human": format_size(file_size)
                                })
                        except Exception as e:
                            print(f"Error processing file {full_path}: {e}")
                            structure[item] = {"type": "file", "error": str(e)}
            except PermissionError:
                print(f"Permission denied: Cannot access {path}")
                structure["__error__"] = "Permission denied"
            except Exception as e:
                print(f"Error scanning directory {path}: {e}")
                structure["__error__"] = str(e)

        # Helper function to format file sizes for human readability
        def format_size(size_bytes):
            """Format bytes to human-readable size"""
            for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
                if size_bytes < 1024.0 or unit == 'TB':
                    return f"{size_bytes:.2f} {unit}"
                size_bytes /= 1024.0

        # Start the scan
        print("Scanning directories and files...")
        scan_directory(start_dir, dir_structure)

        # Print statistics
        print(f"\nScan complete!")
        print(f"Found {stats['total_dirs']} directories and {stats['total_files']} files")
        print(f"Total data size: {format_size(stats['total_size'])}")
        print(f"Found {len(large_files)} files larger than 99MB")

        # Save directory structure to JSON
        structure_file = "directory_structure.json"

        # Backup if needed
        if backup and os.path.exists(structure_file):
            backup_path = f"{structure_file}.bak"
            print(f"Creating backup of {structure_file} at {backup_path}")
            import shutil
            shutil.copy2(structure_file, backup_path)

        # Save the new structure
        import json
        with open(structure_file, 'w') as f:
            json.dump({
                "stats": {
                    "total_directories": stats["total_dirs"],
                    "total_files": stats["total_files"],
                    "total_size_bytes": stats["total_size"],
                    "total_size_human": format_size(stats["total_size"]),
                    "scan_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                },
                "structure": dir_structure
            }, f, indent=2)
        print(f"✓ Complete directory structure saved to {structure_file}")

        # Save large files list to JSON
        large_files_file = "large_files.json"

        # Backup if needed
        if backup and os.path.exists(large_files_file):
            backup_path = f"{large_files_file}.bak"
            print(f"Creating backup of {large_files_file} at {backup_path}")
            import shutil
            shutil.copy2(large_files_file, backup_path)

        # Save the large files list
        with open(large_files_file, 'w') as f:
            json.dump({
                "count": len(large_files),
                "threshold": "99MB",
                "threshold_bytes": size_threshold,
                "files": large_files
            }, f, indent=2)
        print(f"✓ Found {len(large_files)} large files (>99MB), saved to {large_files_file}")

        # Update .gitignore with large files
        gitignore_path = ".gitignore"
        gitignore_lines = []

        # Read existing .gitignore if it exists
        if os.path.exists(gitignore_path):
            # Backup if needed
            if backup:
                backup_path = f"{gitignore_path}.bak"
                print(f"Creating backup of {gitignore_path} at {backup_path}")
                import shutil
                shutil.copy2(gitignore_path, backup_path)

            with open(gitignore_path, 'r') as f:
                gitignore_lines = [line.strip() for line in f.readlines()]

        # Add large files header if needed
        if gitignore_lines and gitignore_lines[-1] != "":
            gitignore_lines.append("")

        if len(large_files) > 0 and "# Large files (>99MB)" not in gitignore_lines:
            gitignore_lines.append("# Large files (>99MB)")

        # Check and add large files that aren't already in .gitignore
        added_count = 0
        for file_info in large_files:
            file_path = file_info["path"]
            if file_path not in gitignore_lines:
                gitignore_lines.append(file_path)
                added_count += 1

        # Write updated .gitignore
        with open(gitignore_path, 'w') as f:
            f.write("\n".join(gitignore_lines))
            # Ensure file ends with newline
            if gitignore_lines and not gitignore_lines[-1].endswith('\n'):
                f.write("\n")

        if added_count > 0:
            print(f"✓ Added {added_count} large files to .gitignore")
        else:
            print("✓ No new large files to add to .gitignore")

        return True

    except Exception as e:
        print(f"Error during file update: {e}")
        import traceback
        traceback.print_exc()
        return False


def restore_file(file_path: str) -> bool:
    """
    Restore a file from its backup.

    Args:
        file_path: Path to the file to restore

    Returns:
        bool: True if restoration succeeded, False otherwise
    """
    try:
        backup_path = f"{file_path}.bak"

        # Check if backup exists
        if not os.path.exists(backup_path):
            print(f"Error: Backup file {backup_path} does not exist.")
            return False

        # Restore from backup
        print(f"Restoring {file_path} from backup...")
        with open(backup_path, 'r') as src, open(file_path, 'w') as dst:
            dst.write(src.read())

        print(f"✓ File {file_path} restored successfully.")
        return True

    except Exception as e:
        print(f"Error restoring file {file_path}: {e}")
        return False


def parse_arguments():
    """
    Parse command line arguments.

    Returns:
        argparse.Namespace: Parsed arguments
    """
    parser = argparse.ArgumentParser(description="GitHub sync tool with file management and code quality checks")

    # GitHub sync options
    parser.add_argument("--github", action="store_true", help="Sync with GitHub")

    # File management options
    parser.add_argument("--file-update", action="store_true",
                       help="Analyze directory structure and handle large files")
    parser.add_argument("--start-dir", type=str, default=".",
                       help="Starting directory for file analysis (default: current directory)")
    parser.add_argument("--no-backup", action="store_true", help="Don't create backups when updating files")
    parser.add_argument("--restore-file", type=str, help="Restore a file from backup")

    # Code quality options
    parser.add_argument("--pylint", action="store_true", help="Run pylint on the codebase")
    parser.add_argument("--check-files", type=str, nargs="+", help="Specific files to check with pylint")

    return parser.parse_args()


def main():
    """
    Main function that handles command line arguments and executes the appropriate actions.

    This function provides a command-line interface for:
    1. Running pylint code quality checks
    2. Updating files with backup creation
    3. Restoring files from backups
    4. Synchronizing with GitHub repositories

    The program will exit after completing file operations or pylint checks without
    proceeding to GitHub sync if those operations were requested.
    """
    try:
        # Parse command line arguments
        args = parse_arguments()

        # Handle pylint check
        if args.pylint:
            run_pylint(args.check_files)
            # Exit after pylint check, don't proceed to GitHub sync
            return

        # Handle file update
        if args.file_update:
            file_update(args.start_dir, not args.no_backup)
            # Exit after file update, don't proceed to GitHub sync
            return

        # Handle file restore
        if args.restore_file:
            restore_file(args.restore_file)
            # Exit after file restore, don't proceed to GitHub sync
            return

        # If --github flag is provided or no specific operation was requested,
        # proceed with GitHub sync
        if args.github or (not args.pylint and not args.file_update and not args.restore_file):
            # Prompt for GitHub connection details
            username = input("GitHub Username: ").strip()
            repo_name = input("GitHub Repository Name: ").strip()
            auth_key = input("SSH Authentication Key or Personal Access Token (optional): ").strip() or None
            use_pat = input("Use Personal Access Token? (y/n): ").lower() == 'y'
            branch = input("Branch to sync (default: main): ").strip() or "main"

            # Validate inputs
            is_valid, error_msg = validate_inputs(username, repo_name, auth_key, use_pat)
            if not is_valid:
                print(f"Error: {error_msg}")
                return

            # Attempt synchronization
            success = sync_with_github(username, repo_name, auth_key, use_pat, branch)

            # Provide user feedback
            if success:
                print("✓ GitHub synchronization completed successfully.")
            else:
                print("✗ GitHub synchronization failed. Check github_sync.log for details.")
        else:
            print("No operation specified. Use --help to see available options.")

    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    sys.exit(0 if main() is None else 1) (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.gpt4all.app:[21:191]
==server.backend.gpt4all.app:[21:191]
MESSAGES = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello there."},
    {"role": "assistant", "content": "Hi, how can I help you?"},
]

SPECIAL_COMMANDS = {
    "/reset": lambda messages: messages.clear(),
    "/exit": lambda _: sys.exit(),
    "/clear": lambda _: print("\n" * 100),
    "/help": lambda _: print("Special commands: /reset, /exit, /help and /clear"),
}

VersionInfo = namedtuple('VersionInfo', ['major', 'minor', 'micro'])
VERSION_INFO = VersionInfo(1, 0, 2)
VERSION = '.'.join(map(str, VERSION_INFO))  # convert to string form, like: '1.2.3'

CLI_START_MESSAGE = f"""

 ██████  ██████  ████████ ██   ██  █████  ██      ██
██       ██   ██    ██    ██   ██ ██   ██ ██      ██
██   ███ ██████     ██    ███████ ███████ ██      ██
██    ██ ██         ██         ██ ██   ██ ██      ██
 ██████  ██         ██         ██ ██   ██ ███████ ███████


Welcome to the GPT4All CLI! Version {VERSION}
Type /help for special commands.

"""

# create typer app
app = typer.Typer()

@app.command()
def repl(
    model: Annotated[
        str,
        typer.Option("--model", "-m", help="Model to use for chatbot"),
    ] = "mistral-7b-instruct-v0.1.Q4_0.gguf",
    n_threads: Annotated[
        int,
        typer.Option("--n-threads", "-t", help="Number of threads to use for chatbot"),
    ] = None,
    device: Annotated[
        str,
        typer.Option("--device",
        "-d",
        help="" +
            "Device to use for chatbot, e.g. gpu, amd, nvidia, intel. Defaults to CPU."),
    ] = None,
):
    """The CLI read-eval-print loop."""
    gpt4all_instance = GPT4All(model, device=device)

    # if threads are passed, set them
    if n_threads is not None:
        num_threads = gpt4all_instance.model.thread_count()
        print(f"\nAdjusted: {num_threads} →", end="")

        # set number of threads
        gpt4all_instance.model.set_thread_count(n_threads)

        num_threads = gpt4all_instance.model.thread_count()
        print(f" {num_threads} threads", end="", flush=True)
    else:
        print(f"\nUsing {gpt4all_instance.model.thread_count()} threads", end="")

    print(CLI_START_MESSAGE)

    use_new_loop = False
    try:
        version = importlib.metadata.version('gpt4all')
        version_major = int(version.split('.')[0])
        if version_major >= 1:
            use_new_loop = True
    except:
        pass  # fall back to old loop
    if use_new_loop:
        _new_loop(gpt4all_instance)
    else:
        _old_loop(gpt4all_instance)


def _old_loop(gpt4all_instance):
    while True:
        message = input(" ⇢  ")

        # Check if special command and take action
        if message in SPECIAL_COMMANDS:
            SPECIAL_COMMANDS[message](MESSAGES)
            continue

        # if regular message, append to messages
        MESSAGES.append({"role": "user", "content": message})

        # execute chat completion and ignore the full response since
        # we are outputting it incrementally
        full_response = gpt4all_instance.chat_completion(
            MESSAGES,
            # preferential kwargs for chat ux
            n_past=0,
            n_predict=200,
            top_k=40,
            top_p=0.9,
            min_p=0.0,
            temp=0.9,
            n_batch=9,
            repeat_penalty=1.1,
            repeat_last_n=64,
            context_erase=0.0,
            # required kwargs for cli ux (incremental response)
            verbose=False,
            streaming=True,
        )
        # record assistant's response to messages
        MESSAGES.append(full_response.get("choices")[0].get("message"))
        print() # newline before next prompt


def _new_loop(gpt4all_instance):
    with gpt4all_instance.chat_session():
        while True:
            message = input(" ⇢  ")

            # Check if special command and take action
            if message in SPECIAL_COMMANDS:
                SPECIAL_COMMANDS[message](MESSAGES)
                continue

            # if regular message, append to messages
            MESSAGES.append({"role": "user", "content": message})

            # execute chat completion and ignore the full response since
            # we are outputting it incrementally
            response_generator = gpt4all_instance.generate(
                message,
                # preferential kwargs for chat ux
                max_tokens=200,
                temp=0.9,
                top_k=40,
                top_p=0.9,
                min_p=0.0,
                repeat_penalty=1.1,
                repeat_last_n=64,
                n_batch=9,
                # required kwargs for cli ux (incremental response)
                streaming=True,
            )
            response = io.StringIO()
            for token in response_generator:
                print(token, end='', flush=True)
                response.write(token)

            # record assistant's response to messages
            response_message = {'role': 'assistant', 'content': response.getvalue()}
            response.close()
            gpt4all_instance.current_chat_session.append(response_message)
            MESSAGES.append(response_message)
            print() # newline before next prompt


@app.command()
def version():
    """The CLI version command."""
    print(f"gpt4all-cli v{VERSION}")


if __name__ == "__main__":
    app() (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==adjust_hierarchy_with_debugger:[18:70]
==devtools.adjust_hierarchy_with_debugger:[18:70]
    expected_structure = {
        'backend': {
            'backend': ['ai_model.py', 'app.py', 'backend.js', 'package-lock.json'],
            'frontend': ['config.py', 'index.html', 'main.js', 'package.json'],
            'models': [],
            'lib': ['libggml-base.so', 'libggml-cpu-alderlake.so'],
        },
        'logs': ['backend.log', 'frontend.log'],
        'readme': ['README.md']
    }

    # Helper function to create the directory structure
    def create_structure(target_path, structure):
        """Create directories and files based on expected structure."""
        for key, value in structure.items():
            target_dir = os.path.join(target_path, key)
            if isinstance(value, list):
                os.makedirs(target_dir, exist_ok=True)
                for file in value:
                    file_path = os.path.join(target_dir, file)
                    if not os.path.exists(file_path):
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write('')
            elif isinstance(value, dict):
                os.makedirs(target_dir, exist_ok=True)
                create_structure(target_dir, value)

    # Create the directory structure
    create_structure(base_dir, expected_structure)
    print(f"Directory structure verified and restored in {base_dir}")


def run_pylint():
    """Run pylint with specific options to check the code."""
    try:
        result = subprocess.run(
            ['pylint', '--disable=all', '--enable=error'],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        if result.stderr:
            print("Error:", result.stderr)
    except FileNotFoundError:
        print("Pylint is not installed. Install it with 'pip install pylint'.")


if __name__ == "__main__":
    BASE_DIR = '/home/zombie/ailinux'
    restore_directory_structure(base_dir)
    run_pylint() (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.app:[235:294]
==server.backend.app:[171:236]
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(new_settings, f, indent=2)

            logger.info(f"Updated settings: {new_settings}")
            return jsonify({"status": "success", "message": "Settings updated"})
        except Exception as e:
            logger.exception(f"Error updating settings: {str(e)}")
            return jsonify({"error": str(e)}), 500
    else:
        try:
            import json
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                return jsonify({"settings": settings})
            else:
                # Return default settings if file doesn't exist
                default_settings = {
                    "ai": {
                        "defaultModel": "gpt4all",
                        "gpt4all_enabled": True,
                        "openai_enabled": bool(os.getenv("OPENAI_API_KEY")),
                        "gemini_enabled": bool(os.getenv("GEMINI_API_KEY")),
                        "huggingface_enabled": bool(os.getenv("HUGGINGFACE_API_KEY"))
                    },
                    "logging": {
                        "level": "info",
                        "log_to_file": True,
                        "max_log_files": 5
                    }
                }
                return jsonify({"settings": default_settings})
        except Exception as e:
            logger.exception(f"Error retrieving settings: {str(e)}")
            return jsonify({"error": str(e)}), 500


@app.route('/health', methods=['GET'])
def health_check():
    """Check the health of the backend server.

    Returns:
        JSON response with server status
    """
    return jsonify({
        "status": "online",
        "environment": ENV,
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    })


def translate_log(log_text):
    """Preprocess log text before AI analysis.

    This function can be expanded to implement more sophisticated
    log translation or normalization.

    Args:
        log_text: The original log text

    Returns:
        Processed log text
    """
    # In the future, add log normalization or preprocessing here (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.app:[168:232]
==server.backend.app:[107:171]
            return jsonify({"logs": logs})

        return jsonify({"logs": []})

    except Exception as e:
        logger.exception(f"Error retrieving logs: {str(e)}")
        return jsonify({"error": str(e)}), 500


@app.route('/models', methods=['GET'])
def get_models():
    """Get list of available AI models.

    Returns:
        JSON response containing available models
    """
    try:
        models = get_available_models()
        return jsonify({"models": models})
    except Exception as e:
        logger.exception(f"Error retrieving models: {str(e)}")
        return jsonify({"error": str(e)}), 500


@app.route('/system', methods=['GET'])
def system_status():
    """Get system status information.

    Returns:
        JSON response with system metrics
    """
    try:
        system_info = {
            "cpu": psutil.cpu_percent(interval=1),
            "ram": psutil.virtual_memory().percent,
            "disk": psutil.disk_usage("/").percent,
            "network": psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv,
            "running_processes": len(psutil.pids()),
            "timestamp": datetime.now().isoformat()
        }
        return jsonify(system_info)
    except Exception as e:
        logger.exception(f"Error retrieving system status: {str(e)}")
        return jsonify({"error": str(e)}), 500


@app.route('/settings', methods=['GET', 'POST'])
def handle_settings():
    """Update or retrieve application settings.

    Returns:
        JSON response with settings data or confirmation
    """
    settings_file = os.path.join(os.path.dirname(__file__), "settings.json")

    if request.method == 'POST':
        try:
            new_settings = request.json

            # Validate settings
            if not isinstance(new_settings, dict):
                return jsonify({"error": "Invalid settings format"}), 400

            # Ensure settings directory exists (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==analyze:[4:36]
==devtools.analyze:[4:36]
ROOT_DIR = "./"

# Ordner, die ausgeschlossen werden sollen
excluded_dirs = {"models", "__pycache__", "node_modules"}

# Log-Dateien ausschließen
excluded_files = {".log"}

# Pfad zur Logdatei
LOG_FILE_PATH = "project_code_analysis_1.log"

# Nur frontend- und backend-Verzeichnisse berücksichtigen
allowed_dirs = {"frontend", "backend"}

with open(log_file_path, "w", encoding='utf-8') as log_file:
    for root, dirs, files in os.walk(root_dir):
        # Filtere die Verzeichnisse, die ausgeschlossen werden sollen
        # und beschränke die Analyse auf frontend und backend
        dirs[:] = [d for d in dirs if d not in excluded_dirs and d in allowed_dirs]

        # Überprüfe, ob der aktuelle Pfad frontend oder backend ist
        current_dir = os.path.basename(root)
        if current_dir not in allowed_dirs:
            continue

        for file in files:
            # Nur .html-Dateien, keine Log-Dateien
            if file.endswith(".html") and not any(file.endswith(ext) for ext in excluded_files):
                file_path = os.path.join(root, file)
                with open(file_path, "r", encoding='utf-8') as f:
                    log_file.write(f"\n--- {file_path} ---\n")
                    log_file.write(f.read()) (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.backend-imports-fix:[80:105]
==client.backend.path-fixer-module:[80:112]
    try:
        module = importlib.import_module(module_name)
        return module
    except ImportError:
        pass

    # Try with backend prefix
    try:
        module = importlib.import_module(f"backend.{module_name}")
        return module
    except ImportError:
        pass

    # Try with client.backend prefix
    try:
        module = importlib.import_module(f"client.backend.{module_name}")
        return module
    except ImportError:
        logger.error(f"Failed to import module: {module_name}")
        return None

def main():
    """
    Run the path fixer to ensure imports work correctly.
    """ (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.backend-imports-fix:[16:54]
==client.backend.path-fixer-module:[16:54]
)
logger = logging.getLogger("PathFixer")

def find_project_root():
    """
    Find the AILinux project root directory.

    Returns:
        str: Path to project root
    """
    # Start from current directory
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # Try to find client directory
    while True:
        # Check if we're in the client directory
        if os.path.basename(current_dir) == 'client':
            return current_dir

        # Check if backend, frontend directories exist
        if os.path.isdir(os.path.join(current_dir, 'backend')) and \
           os.path.isdir(os.path.join(current_dir, 'frontend')):
            return current_dir

        # Move up one level
        parent_dir = os.path.dirname(current_dir)
        if parent_dir == current_dir:  # We've reached the root directory
            break
        current_dir = parent_dir

    # If we couldn't find the project root, return the directory of this script
    return os.path.dirname(os.path.abspath(__file__))

def fix_import_paths():
    """
    Add necessary paths to sys.path to ensure imports work correctly.
    """
    project_root = find_project_root() (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==devtools.adjust_hierarchy_with_debugger:[32:52]
==patch.ailinux-alpha-code-patcher-v0.3:[152:170]
        for key, value in structure.items():
            target_dir = os.path.join(target_path, key)
            if isinstance(value, list):
                os.makedirs(target_dir, exist_ok=True)
                for file in value:
                    file_path = os.path.join(target_dir, file)
                    if not os.path.exists(file_path):
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write('')
            elif isinstance(value, dict):
                os.makedirs(target_dir, exist_ok=True)
                create_structure(target_dir, value)

    # Create the directory structure
    create_structure(base_dir, expected_structure)
    print(f"Directory structure verified and restored in {base_dir}")

 (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==bigfiles:[4:24]
==devtools.bigfiles:[4:24]
DIRECTORY = '/home/zombie/ailinux'

# Verify the directory exists
if os.path.exists(directory):
    # Get all file paths and their sizes
    file_sizes = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_size = os.path.getsize(file_path)
            file_sizes.append((file_path, file_size))

    # Sort by size in descending order
    file_sizes.sort(key=lambda x: x[1], reverse=True)

    # Show top 20 largest files
    top_20_files = file_sizes[:20]
    print(top_20_files)
else:
    print("Directory does not exist or cannot be accessed") (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==devtools.adjust_hierarchy_with_debugger:[52:67]
==patch.ailinux-alpha-code-patcher-v0.3:[172:187]
    try:
        result = subprocess.run(
            ['pylint', '--disable=all', '--enable=error'],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        if result.stderr:
            print("Error:", result.stderr)
    except FileNotFoundError:
        print("Pylint is not installed. Install it with 'pip install pylint'.")


if __name__ == "__main__": (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==devtools.adjust_hierarchy_with_debugger:[18:32]
==patch.ailinux-alpha-code-patcher-v0.3:[138:150]
    expected_structure = {
        'backend': {
            'backend': ['ai_model.py', 'app.py', 'backend.js', 'package-lock.json'],
            'frontend': ['config.py', 'index.html', 'main.js', 'package.json'],
            'models': [],
            'lib': ['libggml-base.so', 'libggml-cpu-alderlake.so'],
        },
        'logs': ['backend.log', 'frontend.log'],
        'readme': ['README.md']
    }

    # Helper function to create the directory structure
    def create_structure(target_path, structure):
        """Create directories and files based on expected structure.""" (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==devtools.adjust_hierarchy_with_debugger:[52:61]
==patch.ailinux-alpha-code-patcher-v0.3:[33:42]
    try:
        result = subprocess.run(
            ['pylint', '--disable=all', '--enable=error'],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        if result.stderr: (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.app:[33:48]
==server.backend.app:[22:36]
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Server configuration with fallback values
HOST = os.getenv("FLASK_HOST", "0.0.0.0")  # Default to all interfaces
PORT = int(os.getenv("FLASK_PORT", 8081))   # Default to 8081
DEBUG = os.getenv("FLASK_DEBUG", "False").lower() == "true"
ENV = os.getenv("ENVIRONMENT", "development")

# Configure logging
log_directory = os.path.join(os.path.dirname(__file__), "logs")
os.makedirs(log_directory, exist_ok=True)
log_file_path = os.path.join(log_directory, "backend.log")
 (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.backend-imports-fix:[57:67]
==client.backend.path-fixer-module:[57:67]
    paths_to_add = [
        project_root,
        os.path.join(project_root, 'backend'),
        os.path.join(project_root, 'client'),
        os.path.join(project_root, 'client', 'backend')
    ]

    for path in paths_to_add:
        if path not in sys.path and os.path.exists(path):
            sys.path.insert(0, path) (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==server.backend.ai_model:[14:25]
==server.backend.websocket-server:[25:36]
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logging.warning("dotenv package not installed, environment variables must be set manually")

# Configure logging with more structured approach
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[ (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.ai_model:[14:25]
==client.websocket-client:[17:28]
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logging.warning("dotenv package not installed, environment variables must be set manually")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[ (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.ai_model:[361:371]
==client.backend.huggingface:[392:401]
    system_prompt = """You are an AI assistant specialized in analyzing logs and providing insights.
Given a log snippet, your task is to:
1. Summarize the key information in the log
2. Identify any errors, warnings, or issues
3. Explain potential causes for the identified problems
4. Suggest troubleshooting steps or solutions

Be concise and precise in your analysis."""

    # Use custom instruction if provided (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.app:[95:104]
==server.backend.app:[57:67]
    try:
        # Validate input data
        if not request.is_json:
            logger.error("Request does not contain valid JSON")
            return jsonify({"error": "Request must be in JSON format"}), 400

        data = request.json
        log_text = data.get('log')
        model_name = data.get('model', 'gpt4all')  # Default to gpt4all (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.gpt4all.app:[143:156]
==server.backend.gpt4all.app:[106:119]
        while True:
            message = input(" ⇢  ")

            # Check if special command and take action
            if message in SPECIAL_COMMANDS:
                SPECIAL_COMMANDS[message](MESSAGES)
                continue

            # if regular message, append to messages
            MESSAGES.append({"role": "user", "content": message})

            # execute chat completion and ignore the full response since
            # we are outputting it incrementally (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.gpt4all.app:[106:119]
==server.backend.gpt4all.app:[143:156]
        while True:
            message = input(" ⇢  ")

            # Check if special command and take action
            if message in SPECIAL_COMMANDS:
                SPECIAL_COMMANDS[message](MESSAGES)
                continue

            # if regular message, append to messages
            MESSAGES.append({"role": "user", "content": message})

            # execute chat completion and ignore the full response since
            # we are outputting it incrementally (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.huggingface:[393:401]
==client.frontend.gpt4all-integration:[148:157]
Given a log snippet, your task is to:
1. Summarize the key information in the log
2. Identify any errors, warnings, or issues
3. Explain potential causes for the identified problems
4. Suggest troubleshooting steps or solutions

Be concise and precise in your analysis."""

        # Prepare the conversation (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.backend-imports-fix:[80:88]
==client.backend.path-fixer-module:[112:120]
    try:
        module = importlib.import_module(module_name)
        return module
    except ImportError:
        pass

    # Try with backend prefix
    try: (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.app:[134:139]
==server.backend.app:[87:92]
    except Exception as e:
        error_message = f"Error in debug endpoint: {str(e)}"
        stack_trace = traceback.format_exc()
        logger.exception(error_message)
        logger.debug(f"Stack trace: {stack_trace}") (duplicate-code)
analyze.py:1:0: R0801: Similar lines in 2 files
==client.backend.backend-imports-fix:[96:108]
==client.backend.path-fixer-module:[128:136]
        return module
    except ImportError:
        logger.error(f"Failed to import module: {module_name}")
        return None

# Run the fixer when the module is imported
fix_import_paths()
 (duplicate-code)


Report
======
3792 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |32     |29         |+3.00      |93.75       |34.38    |
+---------+-------+-----------+-----------+------------+---------+
|class    |13     |13         |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|method   |65     |65         |=          |100.00      |7.69     |
+---------+-------+-----------+-----------+------------+---------+
|function |137    |120        |+17.00     |97.81       |0.00     |
+---------+-------+-----------+-----------+------------+---------+



External dependencies
---------------------
::

    ai_model (client.backend.app,server.backend.app,server.backend.websocket-server)
    gpt4all (client.backend.ai_model,client.backend.gpt4all-log-analyzer,client.backend.gpt4all.app,client.backend.gpt4allinit,client.frontend.gpt4all-integration,server.backend.ai_model,server.backend.gpt4all.app,server.backend.gpt4allinit)
    psutil (client.backend.app,client.backend.app.py-header-fix,server.backend.app)
    typing_extensions (client.backend.gpt4all.app,server.backend.gpt4all.app)
    websockets (server.backend.websocket-server)



8408 lines have been analyzed

Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |5005   |59.53 |4689     |+316.00    |
+----------+-------+------+---------+-----------+
|docstring |1482   |17.63 |1405     |+77.00     |
+----------+-------+------+---------+-----------+
|comment   |733    |8.72  |683      |+50.00     |
+----------+-------+------+---------+-----------+
|empty     |1188   |14.13 |1128     |+60.00     |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |0          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |697    |642      |642        |
+-----------+-------+---------+-----------+
|refactor   |77     |70       |70         |
+-----------+-------+---------+-----------+
|warning    |500    |451      |451        |
+-----------+-------+---------+-----------+
|error      |49     |47       |47         |
+-----------+-------+---------+-----------+



% errors / warnings by module
-----------------------------

+-----------------------------------------+------+--------+---------+-----------+
|module                                   |error |warning |refactor |convention |
+=========================================+======+========+=========+===========+
|client.backend.huggingface               |14.29 |8.20    |0.00     |2.58       |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.app                       |6.12  |5.40    |1.30     |0.43       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.app                       |4.08  |7.40    |2.60     |3.16       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.app.py-header-fix         |4.08  |3.60    |0.00     |2.58       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.hugging                   |4.08  |1.00    |0.00     |0.72       |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.gpt4all.app               |4.08  |0.60    |0.00     |1.00       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.gpt4all.app               |4.08  |0.60    |0.00     |1.00       |
+-----------------------------------------+------+--------+---------+-----------+
|analyze                                  |4.08  |0.00    |33.77    |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.bigfiles                        |4.08  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.analyze                         |4.08  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|bigfiles                                 |4.08  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.websocket-server          |2.04  |8.80    |5.19     |3.16       |
+-----------------------------------------+------+--------+---------+-----------+
|client.websocket-client                  |2.04  |8.00    |1.30     |2.30       |
+-----------------------------------------+------+--------+---------+-----------+
|client.alphaos                           |2.04  |4.40    |0.00     |2.44       |
+-----------------------------------------+------+--------+---------+-----------+
|client.frontend.twitchbot                |2.04  |0.00    |0.00     |0.14       |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.data_server               |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.8    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.7    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.6    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.5    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.4    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.2    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.1    |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.fix_duplicate_code              |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.cleanup                         |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.adjust_hierarchy_with_debugger  |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|client.frontend.log-analysis-integration |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|client.frontend.log-analysis             |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|client.file-sync-client                  |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.gpt4allinit               |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|cleanup                                  |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|adjust_hierarchy_with_debugger           |2.04  |0.00    |0.00     |0.00       |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.ai_model                  |0.00  |9.00    |5.19     |9.33       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.ai_model                  |0.00  |9.00    |5.19     |9.33       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.gpt4all-log-analyzer      |0.00  |5.00    |1.30     |6.03       |
+-----------------------------------------+------+--------+---------+-----------+
|uploadready                              |0.00  |4.80    |7.79     |11.05      |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.uploadready                     |0.00  |4.80    |7.79     |11.05      |
+-----------------------------------------+------+--------+---------+-----------+
|client.frontend.gpt4all-integration      |0.00  |4.80    |0.00     |6.17       |
+-----------------------------------------+------+--------+---------+-----------+
|client.python-fix                        |0.00  |4.20    |1.30     |3.01       |
+-----------------------------------------+------+--------+---------+-----------+
|devtools.enhanced-pylint-fixer           |0.00  |3.80    |23.38    |13.49      |
+-----------------------------------------+------+--------+---------+-----------+
|server.backend.gpt4allinit               |0.00  |2.00    |1.30     |2.01       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.path-fixer-module         |0.00  |1.80    |0.00     |1.87       |
+-----------------------------------------+------+--------+---------+-----------+
|patch.ailinux-alpha-code-patcher-v0.3    |0.00  |1.20    |1.30     |0.29       |
+-----------------------------------------+------+--------+---------+-----------+
|python-optimizer                         |0.00  |1.00    |0.00     |5.45       |
+-----------------------------------------+------+--------+---------+-----------+
|client.backend.backend-imports-fix       |0.00  |0.60    |1.30     |1.43       |
+-----------------------------------------+------+--------+---------+-----------+



Messages
--------

+-------------------------------+------------+
|message id                     |occurrences |
+===============================+============+
|trailing-whitespace            |505         |
+-------------------------------+------------+
|logging-fstring-interpolation  |211         |
+-------------------------------+------------+
|broad-exception-caught         |99          |
+-------------------------------+------------+
|unused-import                  |78          |
+-------------------------------+------------+
|line-too-long                  |67          |
+-------------------------------+------------+
|import-outside-toplevel        |54          |
+-------------------------------+------------+
|redefined-outer-name           |31          |
+-------------------------------+------------+
|invalid-name                   |31          |
+-------------------------------+------------+
|duplicate-code                 |26          |
+-------------------------------+------------+
|wrong-import-position          |23          |
+-------------------------------+------------+
|no-else-return                 |21          |
+-------------------------------+------------+
|import-error                   |21          |
+-------------------------------+------------+
|unspecified-encoding           |20          |
+-------------------------------+------------+
|unused-argument                |14          |
+-------------------------------+------------+
|syntax-error                   |14          |
+-------------------------------+------------+
|wrong-import-order             |11          |
+-------------------------------+------------+
|unused-variable                |11          |
+-------------------------------+------------+
|undefined-variable             |10          |
+-------------------------------+------------+
|too-many-return-statements     |10          |
+-------------------------------+------------+
|subprocess-run-check           |10          |
+-------------------------------+------------+
|f-string-without-interpolation |6           |
+-------------------------------+------------+
|too-many-instance-attributes   |4           |
+-------------------------------+------------+
|too-many-branches              |4           |
+-------------------------------+------------+
|global-statement               |4           |
+-------------------------------+------------+
|unnecessary-pass               |3           |
+-------------------------------+------------+
|too-many-statements            |3           |
+-------------------------------+------------+
|too-many-locals                |3           |
+-------------------------------+------------+
|no-name-in-module              |3           |
+-------------------------------+------------+
|missing-function-docstring     |3           |
+-------------------------------+------------+
|invalid-envvar-default         |3           |
+-------------------------------+------------+
|too-many-nested-blocks         |2           |
+-------------------------------+------------+
|reimported                     |2           |
+-------------------------------+------------+
|raise-missing-from             |2           |
+-------------------------------+------------+
|pointless-string-statement     |2           |
+-------------------------------+------------+
|missing-module-docstring       |2           |
+-------------------------------+------------+
|inconsistent-return-statements |2           |
+-------------------------------+------------+
|bare-except                    |2           |
+-------------------------------+------------+
|too-many-arguments             |1           |
+-------------------------------+------------+
|too-few-public-methods         |1           |
+-------------------------------+------------+
|no-member                      |1           |
+-------------------------------+------------+
|logging-not-lazy               |1           |
+-------------------------------+------------+
|global-variable-not-assigned   |1           |
+-------------------------------+------------+
|consider-iterating-dictionary  |1           |
+-------------------------------+------------+




------------------------------------------------------------------
Your code has been rated at 5.99/10 (previous run: 6.03/10, -0.03)

