
--- ./frontend/log.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Logs</title>
</head>
<body>
  <h1>Logs</h1>
  <pre id="log-content"></pre>
  <script>
    // Assuming you’re loading logs dynamically, maybe fetch them via IPC or a file read
    // For now, we'll simulate it
    const logs = [
      "2025-02-25T20:00:00Z - Main window opened.",
      "2025-02-25T20:10:00Z - User started a chat session."
    ];

    const logContent = document.getElementById('log-content');
    logContent.textContent = logs.join('\n');
  </script>
</body>
</html>

--- ./frontend/llama.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat Interaction</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    #chat-container {
      display: flex;
      flex-direction: column;
      height: 90vh;
    }
    #chat-log {
      flex: 1;
      border: 1px solid #ccc;
      padding: 10px;
      overflow-y: auto;
    }
    #chat-input {
      display: flex;
      margin-top: 10px;
    }
    #chat-input input {
      flex: 1;
      padding: 10px;
      font-size: 16px;
    }
    #chat-input button {
      padding: 10px;
      font-size: 16px;
      margin-left: 5px;
    }
  </style>
</head>
<body>
  <h1>Llama/ChatGPT Interaction</h1>
  <div id="chat-container">
    <div id="chat-log">
      <p>Welcome! Start chatting below:</p>
    </div>
    <div id="chat-input">
      <input type="text" id="userInput" placeholder="Type your message here..." />
      <button onclick="sendMessage()">Send</button>
    </div>
  </div>
  <script>
    function sendMessage() {
      const input = document.getElementById('userInput');
      const chatLog = document.getElementById('chat-log');
      const userMessage = input.value;
      if (userMessage) {
        const userDiv = document.createElement('p');
        userDiv.textContent = `You: ${userMessage}`;
        chatLog.appendChild(userDiv);

        // Here, you’d send the message to the backend
        // For now, we just mock a response
        const responseDiv = document.createElement('p');
        responseDiv.textContent = `ChatGPT: This is a mocked response.`;
        chatLog.appendChild(responseDiv);

        input.value = '';
        chatLog.scrollTop = chatLog.scrollHeight;
      }
    }
  </script>
</body>
</html>

--- ./frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Main Window</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
    }
    h1 {
      color: #2196f3;
    }
    #launch-buttons {
      margin: 20px;
    }
  </style>
</head>
<body>
  <h1>Welcome to My Electron App</h1>
  <p>This is the main application window.</p>
  <div id="launch-buttons">
    <button onclick="toggleLlama()">Toggle Llama Interaction</button>
    <button onclick="toggleLogs()">Toggle Logs</button>
  </div>
  <script>
    function toggleLlama() {
      window.electronAPI.toggleLlama();
    }

    function toggleLogs() {
      window.electronAPI.toggleLog();
    }
  </script>
</body>
</html>

--- ./frontend/settings.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Application Settings</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }
    label {
      display: block;
      margin: 0.5rem 0;
    }
    input, select, button {
      padding: 0.5rem;
      margin-top: 0.5rem;
      margin-bottom: 1rem;
      width: 100%;
    }
    .section {
      margin-bottom: 2rem;
      border-bottom: 1px solid #ccc;
      padding-bottom: 1rem;
    }
  </style>
</head>
<body>
  <h1>Application Settings</h1>

  <!-- GPT API Key Section -->
  <div class="section">
    <h2>GPT Configuration</h2>
    <label for="apiKey">GPT API Key:</label>
    <input type="text" id="apiKey" placeholder="Enter your GPT API key..." />
    <button onclick="saveApiKey()">Save GPT API Key</button>
  </div>

  <!-- AI Features Section -->
  <div class="section">
    <h2>AI Features</h2>
    <label>
      <input type="checkbox" id="aiEnabled" /> Enable AI features
    </label>
    <label>
      <input type="checkbox" id="loggingEnabled" /> Enable logging
    </label>
  </div>

  <!-- Computation Mode Section -->
  <div class="section">
    <h2>Computation Mode</h2>
    <label>
      <input type="radio" name="computationMode" value="cpu" /> CPU mode only
    </label>
    <label>
      <input type="radio" name="computationMode" value="gpu" /> GPU mode only
    </label>
    <label>
      <input type="radio" name="computationMode" value="synchronous" /> Synchronous CPU and GPU
    </label>
  </div>

  <!-- Save Button -->
  <button onclick="saveSettings()">Save All Settings</button>

  <script>
    // Function to save the GPT API key
    async function saveApiKey() {
      const apiKey = document.getElementById('apiKey').value;
      if (apiKey) {
        await window.electronAPI.saveApiKey(apiKey);
        alert('GPT API key saved.');
      } else {
        alert('Please enter a GPT API key.');
      }
    }

    // Function to save all settings
    async function saveSettings() {
      const aiEnabled = document.getElementById('aiEnabled').checked;
      const loggingEnabled = document.getElementById('loggingEnabled').checked;
      const computationMode = document.querySelector('input[name="computationMode"]:checked').value;

      // Send these settings to the main process via IPC or another method
      await window.electronAPI.saveSettings({
        aiEnabled,
        loggingEnabled,
        computationMode,
      });

      alert('Settings saved.');
    }

    // Optional: Load saved settings on page load
    async function loadSettings() {
      const settings = await window.electronAPI.getSettings();
      document.getElementById('aiEnabled').checked = settings.aiEnabled;
      document.getElementById('loggingEnabled').checked = settings.loggingEnabled;

      const modeInput = document.querySelector(`input[name="computationMode"][value="${settings.computationMode}"]`);
      if (modeInput) {
        modeInput.checked = true;
      }

      const apiKey = await window.electronAPI.getApiKey();
      if (apiKey) {
        document.getElementById('apiKey').value = apiKey;
      }
    }

    // Initialize settings when the page loads
    window.onload = loadSettings;
  </script>
</body>
</html>
