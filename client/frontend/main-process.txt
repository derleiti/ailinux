const { app, BrowserWindow, ipcMain, dialog, Menu, shell } = require('electron');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const electronLog = require('electron-log');
const Store = require('electron-store');

// Configure logging
electronLog.transports.file.level = 'info';
electronLog.transports.console.level = 'debug';
electronLog.initialize({ deep: true });

// Configuration store
const store = new Store({
  name: 'ailinux-config',
  defaults: {
    windowBounds: { width: 1200, height: 900 },
    theme: 'system',
    serverUrl: 'http://localhost:8081',
    wsServerUrl: 'ws://localhost:8082'
  }
});

// Main application window
let mainWindow = null;

// Security-enhanced window creation
function createMainWindow() {
  const { width, height } = store.get('windowBounds');
  
  mainWindow = new BrowserWindow({
    width,
    height,
    minWidth: 900,
    minHeight: 600,
    title: 'AILinux',
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
      enableRemoteModule: false,
      worldSafeExecuteJavaScript: true,
      sandbox: true
    }
  });

  // Load the main application
  mainWindow.loadFile('index.html');

  // Persist window size
  mainWindow.on('resize', () => {
    store.set('windowBounds', mainWindow.getBounds());
  });

  // Only allow external links to open in browser
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('http')) {
      shell.openExternal(url);
    }
    return { action: 'deny' };
  });

  // DevTools in development
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }
}

// IPC Handlers with Enhanced Security
function setupIpcHandlers() {
  // Secure configuration access
  ipcMain.handle('get-config', (event, key) => {
    try {
      return store.get(key);
    } catch (error) {
      electronLog.error('Config retrieval error:', error);
      return null;
    }
  });

  // Secure configuration update
  ipcMain.handle('update-config', (event, updates) => {
    try {
      Object.entries(updates).forEach(([key, value]) => {
        store.set(key, value);
      });
      return true;
    } catch (error) {
      electronLog.error('Config update error:', error);
      return false;
    }
  });

  // Backend health check with timeout
  ipcMain.handle('check-backend', async () => {
    try {
      const serverUrl = store.get('serverUrl');
      const response = await axios.get(`${serverUrl}/health`, { timeout: 5000 });
      return {
        status: 'online',
        details: response.data
      };
    } catch (error) {
      electronLog.warn('Backend health check failed:', error.message);
      return {
        status: 'offline',
        error: error.message
      };
    }
  });

  // Logging handler
  ipcMain.on('log', (event, { level, message }) => {
    switch(level) {
      case 'info':
        electronLog.info(message);
        break;
      case 'warn':
        electronLog.warn(message);
        break;
      case 'error':
        electronLog.error(message);
        break;
      default:
        electronLog.info(message);
    }
  });
}

// Application lifecycle management
function setupAppLifecycle() {
  app.on('ready', () => {
    createMainWindow();
    setupIpcHandlers();
    
    // Optional: Custom application menu
    const template = [
      {
        label: 'File',
        submenu: [
          { role: 'quit' }
        ]
      },
      {
        label: 'Edit',
        submenu: [
          { role: 'undo' },
          { role: 'redo' },
          { type: 'separator' },
          { role: 'cut' },
          { role: 'copy' },
          { role: 'paste' }
        ]
      },
      {
        label: 'View',
        submenu: [
          { role: 'reload' },
          { role: 'toggleDevTools' },
          { type: 'separator' },
          { role: 'resetZoom' },
          { role: 'zoomIn' },
          { role: 'zoomOut' }
        ]
      }
    ];

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
  });

  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createMainWindow();
    }
  });
}

// Error handling
function setupErrorHandling() {
  process.on('uncaughtException', (error) => {
    electronLog.error('Uncaught Exception:', error);
    dialog.showErrorBox('Error', `An unexpected error occurred: ${error.message}`);
  });

  process.on('unhandledRejection', (reason, promise) => {
    electronLog.error('Unhandled Rejection:', reason);
  });
}

// Initialize application
function initialize() {
  setupAppLifecycle();
  setupErrorHandling();
}

initialize();

module.exports = {
  mainWindow,
  store,
  electronLog
};
